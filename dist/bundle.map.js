{
  "version": 3,
  "sources": [
    "../../../../.nvm/versions/node/v4.4.5/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "../../../../.nvm/versions/node/v4.4.5/lib/node_modules/browserify/lib/_empty.js",
    "../../../../.nvm/versions/node/v4.4.5/lib/node_modules/browserify/node_modules/buffer/index.js",
    "../../../../.nvm/versions/node/v4.4.5/lib/node_modules/browserify/node_modules/buffer/node_modules/base64-js/index.js",
    "../../../../.nvm/versions/node/v4.4.5/lib/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js",
    "../node_modules/superagent/lib/client.js",
    "../node_modules/superagent/node_modules/component-emitter/index.js",
    "../node_modules/superagent/node_modules/reduce-component/index.js",
    "ApiClient.js",
    "api/AuthenticationApi.js",
    "api/EpisodesApi.js",
    "api/LanguagesApi.js",
    "api/SearchApi.js",
    "api/SeriesApi.js",
    "api/UpdatesApi.js",
    "api/UsersApi.js",
    "index.js",
    "model/Auth.js",
    "model/AuthenticationString.js",
    "model/BasicEpisode.js",
    "model/Conflict.js",
    "model/Episode.js",
    "model/EpisodeDataQueryParams.js",
    "model/EpisodeRecordData.js",
    "model/FilterKeys.js",
    "model/InlineResponse200.js",
    "model/InlineResponse2001.js",
    "model/InlineResponse20010.js",
    "model/InlineResponse20010Data.js",
    "model/InlineResponse20010RatingsInfo.js",
    "model/InlineResponse20011.js",
    "model/InlineResponse20011Data.js",
    "model/InlineResponse20012.js",
    "model/InlineResponse20012Data.js",
    "model/InlineResponse20013.js",
    "model/InlineResponse20013Data.js",
    "model/InlineResponse20014.js",
    "model/InlineResponse20014Data.js",
    "model/InlineResponse20015.js",
    "model/InlineResponse20015Data.js",
    "model/InlineResponse20016.js",
    "model/InlineResponse2001Data.js",
    "model/InlineResponse2002.js",
    "model/InlineResponse2003.js",
    "model/InlineResponse2004.js",
    "model/InlineResponse2005.js",
    "model/InlineResponse2005Data.js",
    "model/InlineResponse2006.js",
    "model/InlineResponse2006Data.js",
    "model/InlineResponse2007.js",
    "model/InlineResponse2007Data.js",
    "model/InlineResponse2007Links.js",
    "model/InlineResponse2008.js",
    "model/InlineResponse2009.js",
    "model/InlineResponse2009Data.js",
    "model/InlineResponse200Data.js",
    "model/InlineResponse200Errors.js",
    "model/InlineResponse401.js",
    "model/InlineResponse404.js",
    "model/InlineResponse409.js",
    "model/JSONErrors.js",
    "model/Language.js",
    "model/LanguageData.js",
    "model/Links.js",
    "model/NotAuthorized.js",
    "model/NotFound.js",
    "model/Series.js",
    "model/SeriesActors.js",
    "model/SeriesActorsData.js",
    "model/SeriesData.js",
    "model/SeriesEpisodes.js",
    "model/SeriesEpisodesQuery.js",
    "model/SeriesEpisodesQueryParams.js",
    "model/SeriesEpisodesSummary.js",
    "model/SeriesImageQueryResult.js",
    "model/SeriesImageQueryResults.js",
    "model/SeriesImagesCount.js",
    "model/SeriesImagesCounts.js",
    "model/SeriesImagesQueryParam.js",
    "model/SeriesImagesQueryParams.js",
    "model/SeriesSearchData.js",
    "model/Token.js",
    "model/Update.js",
    "model/UpdateData.js",
    "model/UpdateDataQueryParams.js",
    "model/User.js",
    "model/UserData.js",
    "model/UserFavorites.js",
    "model/UserFavoritesData.js",
    "model/UserRatings.js",
    "model/UserRatingsData.js",
    "model/UserRatingsDataNoLinks.js",
    "model/UserRatingsQueryParams.js"
  ],
  "names": [],
  "mappingsqlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvqnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACvgpnrxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5ozhevJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvvvvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvvvvvvvzlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvvzvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvvvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvv
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "",
    "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || string instanceof ArrayBuffer) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n",
    "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n",
    "exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n",
    "/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  root = this;\n}\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n        }\n      }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function(v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  }\n  pairs.push(encodeURIComponent(key)\n    + '=' + encodeURIComponent(val));\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    if (res.status >= 200 && res.status < 300) {\n      return self.callback(err, res);\n    }\n\n    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n    new_err.original = err;\n    new_err.response = res;\n    new_err.status = res.status;\n\n    self.callback(new_err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Force given parser\n *\n * Sets the body parser no matter type.\n *\n * @param {Function}\n * @api public\n */\n\nRequest.prototype.parse = function(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(field, file, filename || file.name);\n  return this;\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || isHost(data)) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self.timeoutError();\n      if (self.aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = 'download';\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var contentType = this.getHeader('Content-Type');\n    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n/**\n * Faux promise support\n *\n * @param {Function} fulfill\n * @param {Function} reject\n * @return {Request}\n */\n\nRequest.prototype.then = function (fulfill, reject) {\n  return this.end(function(err, res) {\n    err ? reject(err) : fulfill(res);\n  });\n}\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n",
    "\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n",
    "\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['superagent'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('superagent'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.ApiClient = factory(root.superagent);\n  }\n}(this, function(superagent) {\n  'use strict';\n\n  /**\n   * @module ApiClient\n   * @version 2.1.2\n   */\n\n  /**\n   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n   * contents of this file should be regarded as internal but are documented for completeness.\n   * @alias module:ApiClient\n   * @class\n   */\n  var exports = function() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://localhost/\n     */\n    this.basePath = 'https://localhost/'.replace(/\\/+$/, '');\n\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n    this.authentications = {\n      'jwtToken': {type: 'apiKey', 'in': 'header', name: 'Authorization'}\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n    this.defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n    this.timeout = 60000;\n\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n    this.cache = true;\n  };\n\n  /**\n   * Returns a string representation for an actual parameter.\n   * @param param The actual parameter.\n   * @returns {String} The string representation of <code>param</code>.\n   */\n  exports.prototype.paramToString = function(param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n    return param.toString();\n  };\n\n  /**\n   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n   * NOTE: query parameters are not handled here.\n   * @param {String} path The path to append to the base URL.\n   * @param {Object} pathParams The parameter values to append.\n   * @returns {String} The encoded path with parameter values substituted.\n   */\n  exports.prototype.buildUrl = function(path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n    var url = this.basePath + path;\n    var _this = this;\n    url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n      var value;\n      if (pathParams.hasOwnProperty(key)) {\n        value = _this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n      return encodeURIComponent(value);\n    });\n    return url;\n  };\n\n  /**\n   * Checks whether the given content type represents JSON.<br>\n   * JSON content type examples:<br>\n   * <ul>\n   * <li>application/json</li>\n   * <li>application/json; charset=UTF8</li>\n   * <li>APPLICATION/JSON</li>\n   * </ul>\n   * @param {String} contentType The MIME content type to check.\n   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n   */\n  exports.prototype.isJsonMime = function(contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  };\n\n  /**\n   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n   * @param {Array.<String>} contentTypes\n   * @returns {String} The chosen content type, preferring JSON.\n   */\n  exports.prototype.jsonPreferredMime = function(contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n    return contentTypes[0];\n  };\n\n  /**\n   * Checks whether the given parameter value represents file-like content.\n   * @param param The parameter to check.\n   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n   */\n  exports.prototype.isFileParam = function(param) {\n    // fs.ReadStream in Node.js (but not in runtime like browserify)\n    if (typeof window === 'undefined' &&\n        typeof require === 'function' &&\n        require('fs') &&\n        param instanceof require('fs').ReadStream) {\n      return true;\n    }\n    // Buffer in Node.js\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    }\n    // Blob in browser\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    }\n    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Normalizes parameter values:\n   * <ul>\n   * <li>remove nils</li>\n   * <li>keep files and arrays</li>\n   * <li>format to string with `paramToString` for other cases</li>\n   * </ul>\n   * @param {Object.<String, Object>} params The parameters as object properties.\n   * @returns {Object.<String, Object>} normalized parameters.\n   */\n  exports.prototype.normalizeParams = function(params) {\n    var newParams = {};\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n    return newParams;\n  };\n\n  /**\n   * Enumeration of collection format separator strategies.\n   * @enum {String}\n   * @readonly\n   */\n  exports.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n  };\n\n  /**\n   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n   * @param {Array} param An array parameter.\n   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n   */\n  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n      case 'multi':\n        // return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  };\n\n  /**\n   * Applies authentication headers to the request.\n   * @param {Object} request The request object created by a <code>superagent()</code> call.\n   * @param {Array.<String>} authNames An array of authentication method names.\n   */\n  exports.prototype.applyAuthToRequest = function(request, authNames) {\n    var _this = this;\n    authNames.forEach(function(authName) {\n      var auth = _this.authentications[authName];\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n          break;\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n          break;\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({'Authorization': 'Bearer ' + auth.accessToken});\n          }\n          break;\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  };\n\n  /**\n   * Deserializes an HTTP response body into a value of the specified type.\n   * @param {Object} response A SuperAgent response object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns A value of the specified type.\n   */\n  exports.prototype.deserialize = function deserialize(response, returnType) {\n    if (response == null || returnType == null || response.status == 204) {\n      return null;\n    }\n    // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n    var data = response.body;\n    if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n    return exports.convertToType(data, returnType);\n  };\n\n  /**\n   * Callback function to receive the result of the operation.\n   * @callback module:ApiClient~callApiCallback\n   * @param {String} error Error message, if any.\n   * @param data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Invokes the REST service using the supplied settings and parameters.\n   * @param {String} path The base URL to invoke.\n   * @param {String} httpMethod The HTTP method to use.\n   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n   * @param {Object} bodyParam The value to pass as the request body.\n   * @param {Array.<String>} authNames An array of authentication type names.\n   * @param {Array.<String>} contentTypes An array of request MIME types.\n   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n   * constructor for a complex type.\n   * @param {module:ApiClient~callApiCallback} callback The callback function.\n   * @returns {Object} The SuperAgent request object.\n   */\n  exports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n      queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n      returnType, callback) {\n\n    var _this = this;\n    var url = this.buildUrl(path, pathParams);\n    var request = superagent(httpMethod, url);\n\n    // apply authentications\n    this.applyAuthToRequest(request, authNames);\n\n    // set query parameters\n    if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n    }\n    request.query(this.normalizeParams(queryParams));\n\n    // set header parameters\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n    // set request timeout\n    request.timeout(this.timeout);\n\n    var contentType = this.jsonPreferredMime(contentTypes);\n    if (contentType) {\n      // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n      if(contentType != 'multipart/form-data') {\n        request.type(contentType);\n      }\n    } else if (!request.header['Content-Type']) {\n      request.type('application/json');\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(this.normalizeParams(formParams));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n\n    var accept = this.jsonPreferredMime(accepts);\n    if (accept) {\n      request.accept(accept);\n    }\n\n\n    request.end(function(error, response) {\n      if (callback) {\n        var data = null;\n        if (!error) {\n          try {\n            data = _this.deserialize(response, returnType);\n          } catch (err) {\n            error = err;\n          }\n        }\n        callback(error, data, response);\n      }\n    });\n\n    return request;\n  };\n\n  /**\n   * Parses an ISO-8601 string representation of a date value.\n   * @param {String} str The date value as a string.\n   * @returns {Date} The parsed date object.\n   */\n  exports.parseDate = function(str) {\n    return new Date(str.replace(/T/i, ' '));\n  };\n\n  /**\n   * Converts a value to the specified type.\n   * @param {(String|Object)} data The data to convert, as a string or object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns An instance of the specified type.\n   */\n  exports.convertToType = function(data, type) {\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n      case 'Integer':\n        return parseInt(data, 10);\n      case 'Number':\n        return parseFloat(data);\n      case 'String':\n        return String(data);\n      case 'Date':\n        return this.parseDate(String(data));\n      default:\n        if (type === Object) {\n          // generic object, return directly\n          return data;\n        } else if (typeof type === 'function') {\n          // for model type like: User\n          return type.constructFromObject(data);\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(function(item) {\n            return exports.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n          var result = {};\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = exports.convertToType(k, keyType);\n              var value = exports.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n    }\n  };\n\n  /**\n   * Constructs a new map or array model from REST data.\n   * @param data {Object|Array} The REST data.\n   * @param obj {Object|Array} The target object or array.\n   */\n  exports.constructFromObject = function(data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i))\n          obj[i] = exports.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k))\n          obj[k] = exports.convertToType(data[k], itemType);\n      }\n    }\n  };\n\n  /**\n   * The default API client implementation.\n   * @type {module:ApiClient}\n   */\n  exports.instance = new exports();\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AuthenticationString', 'model/InlineResponse2002', 'model/InlineResponse401'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AuthenticationString'), require('../model/InlineResponse2002'), require('../model/InlineResponse401'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.AuthenticationApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.AuthenticationString, root.TheTvdbApiV2.InlineResponse2002, root.TheTvdbApiV2.InlineResponse401);\n  }\n}(this, function(ApiClient, AuthenticationString, InlineResponse2002, InlineResponse401) {\n  'use strict';\n\n  /**\n   * Authentication service.\n   * @module api/AuthenticationApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new AuthenticationApi. \n   * @alias module:api/AuthenticationApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the loginPost operation.\n     * @callback module:api/AuthenticationApi~loginPostCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2002} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a session token to be included in the rest of the requests. Note that API key authentication is required for all subsequent requests and user auth is required for routes in the &#x60;User&#x60; section\n     * @param {module:model/AuthenticationString} authenticationString JSON string containing your authentication details.\n     * @param {module:api/AuthenticationApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2002}\n     */\n    this.loginPost = function(authenticationString, callback) {\n      var postBody = authenticationString;\n\n      // verify the required parameter 'authenticationString' is set\n      if (authenticationString == undefined || authenticationString == null) {\n        throw new Error(\"Missing the required parameter 'authenticationString' when calling loginPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2002;\n\n      return this.apiClient.callApi(\n        '/login', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the refreshTokenGet operation.\n     * @callback module:api/AuthenticationApi~refreshTokenGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2002} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Refreshes your current, valid JWT token and returns a new token. Hit this route so that you do not have to post to &#x60;/login&#x60; with your API key and credentials once you have already been authenticated.\n     * @param {module:api/AuthenticationApi~refreshTokenGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2002}\n     */\n    this.refreshTokenGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2002;\n\n      return this.apiClient.callApi(\n        '/refresh_token', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse401', 'model/InlineResponse404'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse401'), require('../model/InlineResponse404'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.EpisodesApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse200, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404);\n  }\n}(this, function(ApiClient, InlineResponse200, InlineResponse401, InlineResponse404) {\n  'use strict';\n\n  /**\n   * Episodes service.\n   * @module api/EpisodesApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new EpisodesApi. \n   * @alias module:api/EpisodesApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the episodesIdGet operation.\n     * @callback module:api/EpisodesApi~episodesIdGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse200} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns the full information for a given episode id. __Deprecation Warning:__ The _director_ key will be deprecated in favor of the new _directors_ key in a future release.\n     * @param {Number} id ID of the episode\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/EpisodesApi~episodesIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse200}\n     */\n    this.episodesIdGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling episodesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse200;\n\n      return this.apiClient.callApi(\n        '/episodes/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2001', 'model/InlineResponse2001Data', 'model/InlineResponse401', 'model/InlineResponse404'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'), require('../model/InlineResponse2001Data'), require('../model/InlineResponse401'), require('../model/InlineResponse404'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.LanguagesApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2001, root.TheTvdbApiV2.InlineResponse2001Data, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404);\n  }\n}(this, function(ApiClient, InlineResponse2001, InlineResponse2001Data, InlineResponse401, InlineResponse404) {\n  'use strict';\n\n  /**\n   * Languages service.\n   * @module api/LanguagesApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new LanguagesApi. \n   * @alias module:api/LanguagesApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the languagesGet operation.\n     * @callback module:api/LanguagesApi~languagesGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2001} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * All available languages. These language abbreviations can be used in the &#x60;Accept-Language&#x60; header for routes that return translation records.\n     * @param {module:api/LanguagesApi~languagesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2001}\n     */\n    this.languagesGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2001;\n\n      return this.apiClient.callApi(\n        '/languages', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the languagesIdGet operation.\n     * @callback module:api/LanguagesApi~languagesIdGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2001Data} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Information about a particular language, given the language ID.\n     * @param {String} id ID of the language\n     * @param {module:api/LanguagesApi~languagesIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2001Data}\n     */\n    this.languagesIdGet = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling languagesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2001Data;\n\n      return this.apiClient.callApi(\n        '/languages/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse401', 'model/InlineResponse404'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse401'), require('../model/InlineResponse404'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SearchApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2003, root.TheTvdbApiV2.InlineResponse2004, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404);\n  }\n}(this, function(ApiClient, InlineResponse2003, InlineResponse2004, InlineResponse401, InlineResponse404) {\n  'use strict';\n\n  /**\n   * Search service.\n   * @module api/SearchApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new SearchApi. \n   * @alias module:api/SearchApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the searchSeriesGet operation.\n     * @callback module:api/SearchApi~searchSeriesGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2003} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Allows the user to search for a series based on the following parameters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.name Name of the series to search for.\n     * @param {String} opts.imdbId IMDB id of the series\n     * @param {String} opts.zap2itId Zap2it ID of the series to search for.\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SearchApi~searchSeriesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2003}\n     */\n    this.searchSeriesGet = function(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'name': opts['name'],\n        'imdbId': opts['imdbId'],\n        'zap2itId': opts['zap2itId']\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2003;\n\n      return this.apiClient.callApi(\n        '/search/series', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchSeriesParamsGet operation.\n     * @callback module:api/SearchApi~searchSeriesParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2004} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of parameters to query by in the &#x60;/search/series&#x60; route.\n     * @param {module:api/SearchApi~searchSeriesParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2004}\n     */\n    this.searchSeriesParamsGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2004;\n\n      return this.apiClient.callApi(\n        '/search/series/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20010', 'model/InlineResponse20011', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2006', 'model/InlineResponse2007', 'model/InlineResponse2008', 'model/InlineResponse2009', 'model/InlineResponse401', 'model/InlineResponse404'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20010'), require('../model/InlineResponse20011'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'), require('../model/InlineResponse2007'), require('../model/InlineResponse2008'), require('../model/InlineResponse2009'), require('../model/InlineResponse401'), require('../model/InlineResponse404'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20010, root.TheTvdbApiV2.InlineResponse20011, root.TheTvdbApiV2.InlineResponse2004, root.TheTvdbApiV2.InlineResponse2005, root.TheTvdbApiV2.InlineResponse2006, root.TheTvdbApiV2.InlineResponse2007, root.TheTvdbApiV2.InlineResponse2008, root.TheTvdbApiV2.InlineResponse2009, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404);\n  }\n}(this, function(ApiClient, InlineResponse20010, InlineResponse20011, InlineResponse2004, InlineResponse2005, InlineResponse2006, InlineResponse2007, InlineResponse2008, InlineResponse2009, InlineResponse401, InlineResponse404) {\n  'use strict';\n\n  /**\n   * Series service.\n   * @module api/SeriesApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new SeriesApi. \n   * @alias module:api/SeriesApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the seriesIdActorsGet operation.\n     * @callback module:api/SeriesApi~seriesIdActorsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2006} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns actors for the given series id\n     * @param {Number} id ID of the series\n     * @param {module:api/SeriesApi~seriesIdActorsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2006}\n     */\n    this.seriesIdActorsGet = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdActorsGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2006;\n\n      return this.apiClient.callApi(\n        '/series/{id}/actors', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdEpisodesGet operation.\n     * @callback module:api/SeriesApi~seriesIdEpisodesGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2007} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * All episodes for a given series. Paginated with 100 results per page.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.page Page of results to fetch. Defaults to page 1 if not provided.\n     * @param {module:api/SeriesApi~seriesIdEpisodesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2007}\n     */\n    this.seriesIdEpisodesGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdEpisodesGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n        'page': opts['page']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2007;\n\n      return this.apiClient.callApi(\n        '/series/{id}/episodes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdEpisodesQueryGet operation.\n     * @callback module:api/SeriesApi~seriesIdEpisodesQueryGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2007} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * This route allows the user to query against episodes for the given series. The response is a paginated array of episode records that have been filtered down to basic information.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.absoluteNumber Absolute number of the episode\n     * @param {String} opts.airedSeason Aired season number\n     * @param {String} opts.airedEpisode Aired episode number\n     * @param {String} opts.dvdSeason DVD season number\n     * @param {String} opts.dvdEpisode DVD episode number\n     * @param {String} opts.imdbId IMDB id of the series\n     * @param {String} opts.page Page of results to fetch. Defaults to page 1 if not provided.\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdEpisodesQueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2007}\n     */\n    this.seriesIdEpisodesQueryGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdEpisodesQueryGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n        'absoluteNumber': opts['absoluteNumber'],\n        'airedSeason': opts['airedSeason'],\n        'airedEpisode': opts['airedEpisode'],\n        'dvdSeason': opts['dvdSeason'],\n        'dvdEpisode': opts['dvdEpisode'],\n        'imdbId': opts['imdbId'],\n        'page': opts['page']\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2007;\n\n      return this.apiClient.callApi(\n        '/series/{id}/episodes/query', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdEpisodesQueryParamsGet operation.\n     * @callback module:api/SeriesApi~seriesIdEpisodesQueryParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2004} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns the allowed query keys for the &#x60;/series/{id}/episodes/query&#x60; route\n     * @param {Number} id ID of the series\n     * @param {module:api/SeriesApi~seriesIdEpisodesQueryParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2004}\n     */\n    this.seriesIdEpisodesQueryParamsGet = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdEpisodesQueryParamsGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2004;\n\n      return this.apiClient.callApi(\n        '/series/{id}/episodes/query/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdEpisodesSummaryGet operation.\n     * @callback module:api/SeriesApi~seriesIdEpisodesSummaryGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2008} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a summary of the episodes and seasons available for the series.  __Note__: Season \\&quot;0\\&quot; is for all episodes that are considered to be specials.\n     * @param {Number} id ID of the series\n     * @param {module:api/SeriesApi~seriesIdEpisodesSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2008}\n     */\n    this.seriesIdEpisodesSummaryGet = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdEpisodesSummaryGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2008;\n\n      return this.apiClient.callApi(\n        '/series/{id}/episodes/summary', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdFilterGet operation.\n     * @callback module:api/SeriesApi~seriesIdFilterGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2005} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the &#x60;/series/{id}/filter/params&#x60; route.\n     * @param {Number} id ID of the series\n     * @param {String} keys Comma-separated list of keys to filter by\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdFilterGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2005}\n     */\n    this.seriesIdFilterGet = function(id, keys, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdFilterGet\");\n      }\n\n      // verify the required parameter 'keys' is set\n      if (keys == undefined || keys == null) {\n        throw new Error(\"Missing the required parameter 'keys' when calling seriesIdFilterGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n        'keys': keys\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2005;\n\n      return this.apiClient.callApi(\n        '/series/{id}/filter', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdFilterParamsGet operation.\n     * @callback module:api/SeriesApi~seriesIdFilterParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2004} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns the list of keys available for the &#x60;/series/{id}/filter&#x60; route\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdFilterParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2004}\n     */\n    this.seriesIdFilterParamsGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdFilterParamsGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2004;\n\n      return this.apiClient.callApi(\n        '/series/{id}/filter/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdGet operation.\n     * @callback module:api/SeriesApi~seriesIdGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2005} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a series records that contains all information known about a particular series id.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2005}\n     */\n    this.seriesIdGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2005;\n\n      return this.apiClient.callApi(\n        '/series/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdHead operation.\n     * @callback module:api/SeriesApi~seriesIdHeadCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns header information only about the given series ID.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdHeadCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.seriesIdHead = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdHead\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/series/{id}', 'HEAD',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdImagesGet operation.\n     * @callback module:api/SeriesApi~seriesIdImagesGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2009} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a summary of the images for a particular series\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2009}\n     */\n    this.seriesIdImagesGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdImagesGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2009;\n\n      return this.apiClient.callApi(\n        '/series/{id}/images', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdImagesQueryGet operation.\n     * @callback module:api/SeriesApi~seriesIdImagesQueryGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20010} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Query images for the given series ID.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.keyType Type of image you&#39;re querying for (fanart, poster, etc. See ../images/query/params for more details).\n     * @param {String} opts.resolution Resolution to filter by (1280x1024, for example)\n     * @param {String} opts.subKey Subkey for the above query keys. See /series/{id}/images/query/params for more information\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdImagesQueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20010}\n     */\n    this.seriesIdImagesQueryGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdImagesQueryGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n        'keyType': opts['keyType'],\n        'resolution': opts['resolution'],\n        'subKey': opts['subKey']\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20010;\n\n      return this.apiClient.callApi(\n        '/series/{id}/images/query', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the seriesIdImagesQueryParamsGet operation.\n     * @callback module:api/SeriesApi~seriesIdImagesQueryParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20011} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns the allowed query keys for the &#x60;/series/{id}/images/query&#x60; route. Contains a parameter record for each unique &#x60;keyType&#x60;, listing values that will return results.\n     * @param {Number} id ID of the series\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/SeriesApi~seriesIdImagesQueryParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20011}\n     */\n    this.seriesIdImagesQueryParamsGet = function(id, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling seriesIdImagesQueryParamsGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20011;\n\n      return this.apiClient.callApi(\n        '/series/{id}/images/query/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20012', 'model/InlineResponse2004', 'model/InlineResponse401', 'model/InlineResponse404'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20012'), require('../model/InlineResponse2004'), require('../model/InlineResponse401'), require('../model/InlineResponse404'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UpdatesApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20012, root.TheTvdbApiV2.InlineResponse2004, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404);\n  }\n}(this, function(ApiClient, InlineResponse20012, InlineResponse2004, InlineResponse401, InlineResponse404) {\n  'use strict';\n\n  /**\n   * Updates service.\n   * @module api/UpdatesApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new UpdatesApi. \n   * @alias module:api/UpdatesApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the updatedQueryGet operation.\n     * @callback module:api/UpdatesApi~updatedQueryGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20012} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of series that have changed in a maximum of one week blocks since the provided &#x60;fromTime&#x60;.   The user may specify a &#x60;toTime&#x60; to grab results for less than a week. Any timespan larger than a week will be reduced down to one week automatically.\n     * @param {String} fromTime Epoch time to start your date range.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.toTime Epoch time to end your date range. Must be one week from &#x60;fromTime&#x60;.\n     * @param {String} opts.acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.\n     * @param {module:api/UpdatesApi~updatedQueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20012}\n     */\n    this.updatedQueryGet = function(fromTime, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'fromTime' is set\n      if (fromTime == undefined || fromTime == null) {\n        throw new Error(\"Missing the required parameter 'fromTime' when calling updatedQueryGet\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'fromTime': fromTime,\n        'toTime': opts['toTime']\n      };\n      var headerParams = {\n        'Accept-Language': opts['acceptLanguage']\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20012;\n\n      return this.apiClient.callApi(\n        '/updated/query', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the updatedQueryParamsGet operation.\n     * @callback module:api/UpdatesApi~updatedQueryParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2004} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of valid query keys for the &#x60;/updated/query/params&#x60; route.\n     * @param {module:api/UpdatesApi~updatedQueryParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2004}\n     */\n    this.updatedQueryParamsGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2004;\n\n      return this.apiClient.callApi(\n        '/updated/query/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse2004', 'model/InlineResponse401', 'model/InlineResponse404', 'model/InlineResponse409'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse2004'), require('../model/InlineResponse401'), require('../model/InlineResponse404'), require('../model/InlineResponse409'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UsersApi = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20013, root.TheTvdbApiV2.InlineResponse20014, root.TheTvdbApiV2.InlineResponse20015, root.TheTvdbApiV2.InlineResponse20016, root.TheTvdbApiV2.InlineResponse2004, root.TheTvdbApiV2.InlineResponse401, root.TheTvdbApiV2.InlineResponse404, root.TheTvdbApiV2.InlineResponse409);\n  }\n}(this, function(ApiClient, InlineResponse20013, InlineResponse20014, InlineResponse20015, InlineResponse20016, InlineResponse2004, InlineResponse401, InlineResponse404, InlineResponse409) {\n  'use strict';\n\n  /**\n   * Users service.\n   * @module api/UsersApi\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new UsersApi. \n   * @alias module:api/UsersApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the userFavoritesGet operation.\n     * @callback module:api/UsersApi~userFavoritesGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20014} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of favorite series for a given user, will be a blank array if no favorites exist.\n     * @param {module:api/UsersApi~userFavoritesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20014}\n     */\n    this.userFavoritesGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20014;\n\n      return this.apiClient.callApi(\n        '/user/favorites', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userFavoritesIdDelete operation.\n     * @callback module:api/UsersApi~userFavoritesIdDeleteCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20014} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Deletes the given series ID from the user’s favorite’s list and returns the updated list.\n     * @param {Number} id ID of the series\n     * @param {module:api/UsersApi~userFavoritesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20014}\n     */\n    this.userFavoritesIdDelete = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling userFavoritesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20014;\n\n      return this.apiClient.callApi(\n        '/user/favorites/{id}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userFavoritesIdPut operation.\n     * @callback module:api/UsersApi~userFavoritesIdPutCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20014} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Adds the supplied series ID to the user’s favorite’s list and returns the updated list.\n     * @param {Number} id ID of the series\n     * @param {module:api/UsersApi~userFavoritesIdPutCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20014}\n     */\n    this.userFavoritesIdPut = function(id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw new Error(\"Missing the required parameter 'id' when calling userFavoritesIdPut\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20014;\n\n      return this.apiClient.callApi(\n        '/user/favorites/{id}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userGet operation.\n     * @callback module:api/UsersApi~userGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20013} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns basic information about the currently authenticated user.\n     * @param {module:api/UsersApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20013}\n     */\n    this.userGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20013;\n\n      return this.apiClient.callApi(\n        '/user', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userRatingsGet operation.\n     * @callback module:api/UsersApi~userRatingsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20015} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of ratings for the given user.\n     * @param {module:api/UsersApi~userRatingsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20015}\n     */\n    this.userRatingsGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20015;\n\n      return this.apiClient.callApi(\n        '/user/ratings', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userRatingsItemTypeItemIdItemRatingPut operation.\n     * @callback module:api/UsersApi~userRatingsItemTypeItemIdItemRatingPutCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20016} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * This route updates a given rating of a given type.\n     * @param {String} itemType Item to update. Can be either &#39;series&#39;, &#39;episode&#39;, or &#39;image&#39;\n     * @param {Number} itemId ID of the ratings record that you wish to modify\n     * @param {Number} itemRating The updated rating number\n     * @param {module:api/UsersApi~userRatingsItemTypeItemIdItemRatingPutCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20016}\n     */\n    this.userRatingsItemTypeItemIdItemRatingPut = function(itemType, itemId, itemRating, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'itemType' is set\n      if (itemType == undefined || itemType == null) {\n        throw new Error(\"Missing the required parameter 'itemType' when calling userRatingsItemTypeItemIdItemRatingPut\");\n      }\n\n      // verify the required parameter 'itemId' is set\n      if (itemId == undefined || itemId == null) {\n        throw new Error(\"Missing the required parameter 'itemId' when calling userRatingsItemTypeItemIdItemRatingPut\");\n      }\n\n      // verify the required parameter 'itemRating' is set\n      if (itemRating == undefined || itemRating == null) {\n        throw new Error(\"Missing the required parameter 'itemRating' when calling userRatingsItemTypeItemIdItemRatingPut\");\n      }\n\n\n      var pathParams = {\n        'itemType': itemType,\n        'itemId': itemId,\n        'itemRating': itemRating\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20016;\n\n      return this.apiClient.callApi(\n        '/user/ratings/{itemType}/{itemId}/{itemRating}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userRatingsQueryGet operation.\n     * @callback module:api/UsersApi~userRatingsQueryGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse20015} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns an array of ratings for a given user that match the query.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.itemType Item to query. Can be either &#39;series&#39;, &#39;episode&#39;, or &#39;banner&#39;\n     * @param {module:api/UsersApi~userRatingsQueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse20015}\n     */\n    this.userRatingsQueryGet = function(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'itemType': opts['itemType']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse20015;\n\n      return this.apiClient.callApi(\n        '/user/ratings/query', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the userRatingsQueryParamsGet operation.\n     * @callback module:api/UsersApi~userRatingsQueryParamsGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InlineResponse2004} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a list of query params for use in the &#x60;/user/ratings/query&#x60; route.\n     * @param {module:api/UsersApi~userRatingsQueryParamsGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InlineResponse2004}\n     */\n    this.userRatingsQueryParamsGet = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['jwtToken'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2004;\n\n      return this.apiClient.callApi(\n        '/user/ratings/query/params', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Auth', 'model/AuthenticationString', 'model/BasicEpisode', 'model/Conflict', 'model/Episode', 'model/EpisodeDataQueryParams', 'model/EpisodeRecordData', 'model/FilterKeys', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse20010', 'model/InlineResponse20010Data', 'model/InlineResponse20010RatingsInfo', 'model/InlineResponse20011', 'model/InlineResponse20011Data', 'model/InlineResponse20012', 'model/InlineResponse20012Data', 'model/InlineResponse20013', 'model/InlineResponse20013Data', 'model/InlineResponse20014', 'model/InlineResponse20014Data', 'model/InlineResponse20015', 'model/InlineResponse20015Data', 'model/InlineResponse20016', 'model/InlineResponse2001Data', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2005Data', 'model/InlineResponse2006', 'model/InlineResponse2006Data', 'model/InlineResponse2007', 'model/InlineResponse2007Data', 'model/InlineResponse2007Links', 'model/InlineResponse2008', 'model/InlineResponse2009', 'model/InlineResponse2009Data', 'model/InlineResponse200Data', 'model/InlineResponse200Errors', 'model/InlineResponse401', 'model/InlineResponse404', 'model/InlineResponse409', 'model/JSONErrors', 'model/Language', 'model/LanguageData', 'model/Links', 'model/NotAuthorized', 'model/NotFound', 'model/Series', 'model/SeriesActors', 'model/SeriesActorsData', 'model/SeriesData', 'model/SeriesEpisodes', 'model/SeriesEpisodesQuery', 'model/SeriesEpisodesQueryParams', 'model/SeriesEpisodesSummary', 'model/SeriesImageQueryResult', 'model/SeriesImageQueryResults', 'model/SeriesImagesCount', 'model/SeriesImagesCounts', 'model/SeriesImagesQueryParam', 'model/SeriesImagesQueryParams', 'model/SeriesSearchData', 'model/Token', 'model/Update', 'model/UpdateData', 'model/UpdateDataQueryParams', 'model/User', 'model/UserData', 'model/UserFavorites', 'model/UserFavoritesData', 'model/UserRatings', 'model/UserRatingsData', 'model/UserRatingsDataNoLinks', 'model/UserRatingsQueryParams', 'api/AuthenticationApi', 'api/EpisodesApi', 'api/LanguagesApi', 'api/SearchApi', 'api/SeriesApi', 'api/UpdatesApi', 'api/UsersApi'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('./ApiClient'), require('./model/Auth'), require('./model/AuthenticationString'), require('./model/BasicEpisode'), require('./model/Conflict'), require('./model/Episode'), require('./model/EpisodeDataQueryParams'), require('./model/EpisodeRecordData'), require('./model/FilterKeys'), require('./model/InlineResponse200'), require('./model/InlineResponse2001'), require('./model/InlineResponse20010'), require('./model/InlineResponse20010Data'), require('./model/InlineResponse20010RatingsInfo'), require('./model/InlineResponse20011'), require('./model/InlineResponse20011Data'), require('./model/InlineResponse20012'), require('./model/InlineResponse20012Data'), require('./model/InlineResponse20013'), require('./model/InlineResponse20013Data'), require('./model/InlineResponse20014'), require('./model/InlineResponse20014Data'), require('./model/InlineResponse20015'), require('./model/InlineResponse20015Data'), require('./model/InlineResponse20016'), require('./model/InlineResponse2001Data'), require('./model/InlineResponse2002'), require('./model/InlineResponse2003'), require('./model/InlineResponse2004'), require('./model/InlineResponse2005'), require('./model/InlineResponse2005Data'), require('./model/InlineResponse2006'), require('./model/InlineResponse2006Data'), require('./model/InlineResponse2007'), require('./model/InlineResponse2007Data'), require('./model/InlineResponse2007Links'), require('./model/InlineResponse2008'), require('./model/InlineResponse2009'), require('./model/InlineResponse2009Data'), require('./model/InlineResponse200Data'), require('./model/InlineResponse200Errors'), require('./model/InlineResponse401'), require('./model/InlineResponse404'), require('./model/InlineResponse409'), require('./model/JSONErrors'), require('./model/Language'), require('./model/LanguageData'), require('./model/Links'), require('./model/NotAuthorized'), require('./model/NotFound'), require('./model/Series'), require('./model/SeriesActors'), require('./model/SeriesActorsData'), require('./model/SeriesData'), require('./model/SeriesEpisodes'), require('./model/SeriesEpisodesQuery'), require('./model/SeriesEpisodesQueryParams'), require('./model/SeriesEpisodesSummary'), require('./model/SeriesImageQueryResult'), require('./model/SeriesImageQueryResults'), require('./model/SeriesImagesCount'), require('./model/SeriesImagesCounts'), require('./model/SeriesImagesQueryParam'), require('./model/SeriesImagesQueryParams'), require('./model/SeriesSearchData'), require('./model/Token'), require('./model/Update'), require('./model/UpdateData'), require('./model/UpdateDataQueryParams'), require('./model/User'), require('./model/UserData'), require('./model/UserFavorites'), require('./model/UserFavoritesData'), require('./model/UserRatings'), require('./model/UserRatingsData'), require('./model/UserRatingsDataNoLinks'), require('./model/UserRatingsQueryParams'), require('./api/AuthenticationApi'), require('./api/EpisodesApi'), require('./api/LanguagesApi'), require('./api/SearchApi'), require('./api/SeriesApi'), require('./api/UpdatesApi'), require('./api/UsersApi'));\n  }\n}(function(ApiClient, Auth, AuthenticationString, BasicEpisode, Conflict, Episode, EpisodeDataQueryParams, EpisodeRecordData, FilterKeys, InlineResponse200, InlineResponse2001, InlineResponse20010, InlineResponse20010Data, InlineResponse20010RatingsInfo, InlineResponse20011, InlineResponse20011Data, InlineResponse20012, InlineResponse20012Data, InlineResponse20013, InlineResponse20013Data, InlineResponse20014, InlineResponse20014Data, InlineResponse20015, InlineResponse20015Data, InlineResponse20016, InlineResponse2001Data, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse2005Data, InlineResponse2006, InlineResponse2006Data, InlineResponse2007, InlineResponse2007Data, InlineResponse2007Links, InlineResponse2008, InlineResponse2009, InlineResponse2009Data, InlineResponse200Data, InlineResponse200Errors, InlineResponse401, InlineResponse404, InlineResponse409, JSONErrors, Language, LanguageData, Links, NotAuthorized, NotFound, Series, SeriesActors, SeriesActorsData, SeriesData, SeriesEpisodes, SeriesEpisodesQuery, SeriesEpisodesQueryParams, SeriesEpisodesSummary, SeriesImageQueryResult, SeriesImageQueryResults, SeriesImagesCount, SeriesImagesCounts, SeriesImagesQueryParam, SeriesImagesQueryParams, SeriesSearchData, Token, Update, UpdateData, UpdateDataQueryParams, User, UserData, UserFavorites, UserFavoritesData, UserRatings, UserRatingsData, UserRatingsDataNoLinks, UserRatingsQueryParams, AuthenticationApi, EpisodesApi, LanguagesApi, SearchApi, SeriesApi, UpdatesApi, UsersApi) {\n  'use strict';\n\n  /**\n   * API_v2_targets_v1_functionality_with_a_few_minor_additions__The_API_is_accessible_via_httpsapi_thetvdb_com_and_provides_the_following_REST_endpoints_in_JSON_format_How_to_use_this_API_documentation________________You_may_browse_the_API_routes_without_authentication_but_if_you_wish_to_send_requests_to_the_API_and_see_response_data_then_you_must_authenticate_1__Obtain_a_JWT_token_by_POSTing__to_the_login_route_in_the_Authentication_section_with_your_API_key_and_credentials_1__Paste_the_JWT_token_from_the_response_into_the_JWT_Token_field_at_the_top_of_the_page_and_click_the_Add_Token_button_You_will_now_be_able_to_use_the_remaining_routes_to_send_requests_to_the_API_and_get_a_response_Language_Selection________________Language_selection_is_done_via_the_Accept_Language_header__At_the_moment_you_may_only_pass_one_language_abbreviation_in_the_header_at_a_time__Valid_language_abbreviations_can_be_found_at_the_languages_route__Authentication________________Authentication_to_use_the_API_is_similar_to_the_How_to_section_above__Users_must_POST_to_the_login_route_with_their_API_key_and_credentials_in_the_following_format_in_order_to_obtain_a_JWT_token_apikeyAPIKEYusernameUSERNAMEuserkeyUSERKEYNote_that_the_username_and_key_are_ONLY_required_for_the_user_routes__The_users_key_is_labled_Account_Identifier_in_the_account_section_of_the_main_site_The_token_is_then_used_in_all_subsequent_requests_by_providing_it_in_the_Authorization_header__The_header_will_look_like_Authorization_Bearer_yourJWTtoken__Currently_the_token_expires_after_24_hours__You_can_GET_the_refresh_token_route_to_extend_that_expiration_date_Versioning________________You_may_request_a_different_version_of_the_API_by_including_an_Accept_header_in_your_request_with_the_following_format_Acceptapplicationvnd_thetvdb_vVERSION__This_documentation_automatically_uses_the_version_seen_at_the_top_and_bottom_of_the_page_.<br>\n   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.\n   * <p>\n   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:\n   * <pre>\n   * var TheTvdbApiV2 = require('index'); // See note below*.\n   * var xxxSvc = new TheTvdbApiV2.XxxApi(); // Allocate the API class we're going to use.\n   * var yyyModel = new TheTvdbApiV2.Yyy(); // Construct a model instance.\n   * yyyModel.someProperty = 'someValue';\n   * ...\n   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n   * ...\n   * </pre>\n   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})\n   * and put the application logic within the callback function.</em>\n   * </p>\n   * <p>\n   * A non-AMD browser application (discouraged) might do something like this:\n   * <pre>\n   * var xxxSvc = new TheTvdbApiV2.XxxApi(); // Allocate the API class we're going to use.\n   * var yyy = new TheTvdbApiV2.Yyy(); // Construct a model instance.\n   * yyyModel.someProperty = 'someValue';\n   * ...\n   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n   * ...\n   * </pre>\n   * </p>\n   * @module index\n   * @version 2.1.2\n   */\n  var exports = {\n    /**\n     * The ApiClient constructor.\n     * @property {module:ApiClient}\n     */\n    ApiClient: ApiClient,\n    /**\n     * The Auth model constructor.\n     * @property {module:model/Auth}\n     */\n    Auth: Auth,\n    /**\n     * The AuthenticationString model constructor.\n     * @property {module:model/AuthenticationString}\n     */\n    AuthenticationString: AuthenticationString,\n    /**\n     * The BasicEpisode model constructor.\n     * @property {module:model/BasicEpisode}\n     */\n    BasicEpisode: BasicEpisode,\n    /**\n     * The Conflict model constructor.\n     * @property {module:model/Conflict}\n     */\n    Conflict: Conflict,\n    /**\n     * The Episode model constructor.\n     * @property {module:model/Episode}\n     */\n    Episode: Episode,\n    /**\n     * The EpisodeDataQueryParams model constructor.\n     * @property {module:model/EpisodeDataQueryParams}\n     */\n    EpisodeDataQueryParams: EpisodeDataQueryParams,\n    /**\n     * The EpisodeRecordData model constructor.\n     * @property {module:model/EpisodeRecordData}\n     */\n    EpisodeRecordData: EpisodeRecordData,\n    /**\n     * The FilterKeys model constructor.\n     * @property {module:model/FilterKeys}\n     */\n    FilterKeys: FilterKeys,\n    /**\n     * The InlineResponse200 model constructor.\n     * @property {module:model/InlineResponse200}\n     */\n    InlineResponse200: InlineResponse200,\n    /**\n     * The InlineResponse2001 model constructor.\n     * @property {module:model/InlineResponse2001}\n     */\n    InlineResponse2001: InlineResponse2001,\n    /**\n     * The InlineResponse20010 model constructor.\n     * @property {module:model/InlineResponse20010}\n     */\n    InlineResponse20010: InlineResponse20010,\n    /**\n     * The InlineResponse20010Data model constructor.\n     * @property {module:model/InlineResponse20010Data}\n     */\n    InlineResponse20010Data: InlineResponse20010Data,\n    /**\n     * The InlineResponse20010RatingsInfo model constructor.\n     * @property {module:model/InlineResponse20010RatingsInfo}\n     */\n    InlineResponse20010RatingsInfo: InlineResponse20010RatingsInfo,\n    /**\n     * The InlineResponse20011 model constructor.\n     * @property {module:model/InlineResponse20011}\n     */\n    InlineResponse20011: InlineResponse20011,\n    /**\n     * The InlineResponse20011Data model constructor.\n     * @property {module:model/InlineResponse20011Data}\n     */\n    InlineResponse20011Data: InlineResponse20011Data,\n    /**\n     * The InlineResponse20012 model constructor.\n     * @property {module:model/InlineResponse20012}\n     */\n    InlineResponse20012: InlineResponse20012,\n    /**\n     * The InlineResponse20012Data model constructor.\n     * @property {module:model/InlineResponse20012Data}\n     */\n    InlineResponse20012Data: InlineResponse20012Data,\n    /**\n     * The InlineResponse20013 model constructor.\n     * @property {module:model/InlineResponse20013}\n     */\n    InlineResponse20013: InlineResponse20013,\n    /**\n     * The InlineResponse20013Data model constructor.\n     * @property {module:model/InlineResponse20013Data}\n     */\n    InlineResponse20013Data: InlineResponse20013Data,\n    /**\n     * The InlineResponse20014 model constructor.\n     * @property {module:model/InlineResponse20014}\n     */\n    InlineResponse20014: InlineResponse20014,\n    /**\n     * The InlineResponse20014Data model constructor.\n     * @property {module:model/InlineResponse20014Data}\n     */\n    InlineResponse20014Data: InlineResponse20014Data,\n    /**\n     * The InlineResponse20015 model constructor.\n     * @property {module:model/InlineResponse20015}\n     */\n    InlineResponse20015: InlineResponse20015,\n    /**\n     * The InlineResponse20015Data model constructor.\n     * @property {module:model/InlineResponse20015Data}\n     */\n    InlineResponse20015Data: InlineResponse20015Data,\n    /**\n     * The InlineResponse20016 model constructor.\n     * @property {module:model/InlineResponse20016}\n     */\n    InlineResponse20016: InlineResponse20016,\n    /**\n     * The InlineResponse2001Data model constructor.\n     * @property {module:model/InlineResponse2001Data}\n     */\n    InlineResponse2001Data: InlineResponse2001Data,\n    /**\n     * The InlineResponse2002 model constructor.\n     * @property {module:model/InlineResponse2002}\n     */\n    InlineResponse2002: InlineResponse2002,\n    /**\n     * The InlineResponse2003 model constructor.\n     * @property {module:model/InlineResponse2003}\n     */\n    InlineResponse2003: InlineResponse2003,\n    /**\n     * The InlineResponse2004 model constructor.\n     * @property {module:model/InlineResponse2004}\n     */\n    InlineResponse2004: InlineResponse2004,\n    /**\n     * The InlineResponse2005 model constructor.\n     * @property {module:model/InlineResponse2005}\n     */\n    InlineResponse2005: InlineResponse2005,\n    /**\n     * The InlineResponse2005Data model constructor.\n     * @property {module:model/InlineResponse2005Data}\n     */\n    InlineResponse2005Data: InlineResponse2005Data,\n    /**\n     * The InlineResponse2006 model constructor.\n     * @property {module:model/InlineResponse2006}\n     */\n    InlineResponse2006: InlineResponse2006,\n    /**\n     * The InlineResponse2006Data model constructor.\n     * @property {module:model/InlineResponse2006Data}\n     */\n    InlineResponse2006Data: InlineResponse2006Data,\n    /**\n     * The InlineResponse2007 model constructor.\n     * @property {module:model/InlineResponse2007}\n     */\n    InlineResponse2007: InlineResponse2007,\n    /**\n     * The InlineResponse2007Data model constructor.\n     * @property {module:model/InlineResponse2007Data}\n     */\n    InlineResponse2007Data: InlineResponse2007Data,\n    /**\n     * The InlineResponse2007Links model constructor.\n     * @property {module:model/InlineResponse2007Links}\n     */\n    InlineResponse2007Links: InlineResponse2007Links,\n    /**\n     * The InlineResponse2008 model constructor.\n     * @property {module:model/InlineResponse2008}\n     */\n    InlineResponse2008: InlineResponse2008,\n    /**\n     * The InlineResponse2009 model constructor.\n     * @property {module:model/InlineResponse2009}\n     */\n    InlineResponse2009: InlineResponse2009,\n    /**\n     * The InlineResponse2009Data model constructor.\n     * @property {module:model/InlineResponse2009Data}\n     */\n    InlineResponse2009Data: InlineResponse2009Data,\n    /**\n     * The InlineResponse200Data model constructor.\n     * @property {module:model/InlineResponse200Data}\n     */\n    InlineResponse200Data: InlineResponse200Data,\n    /**\n     * The InlineResponse200Errors model constructor.\n     * @property {module:model/InlineResponse200Errors}\n     */\n    InlineResponse200Errors: InlineResponse200Errors,\n    /**\n     * The InlineResponse401 model constructor.\n     * @property {module:model/InlineResponse401}\n     */\n    InlineResponse401: InlineResponse401,\n    /**\n     * The InlineResponse404 model constructor.\n     * @property {module:model/InlineResponse404}\n     */\n    InlineResponse404: InlineResponse404,\n    /**\n     * The InlineResponse409 model constructor.\n     * @property {module:model/InlineResponse409}\n     */\n    InlineResponse409: InlineResponse409,\n    /**\n     * The JSONErrors model constructor.\n     * @property {module:model/JSONErrors}\n     */\n    JSONErrors: JSONErrors,\n    /**\n     * The Language model constructor.\n     * @property {module:model/Language}\n     */\n    Language: Language,\n    /**\n     * The LanguageData model constructor.\n     * @property {module:model/LanguageData}\n     */\n    LanguageData: LanguageData,\n    /**\n     * The Links model constructor.\n     * @property {module:model/Links}\n     */\n    Links: Links,\n    /**\n     * The NotAuthorized model constructor.\n     * @property {module:model/NotAuthorized}\n     */\n    NotAuthorized: NotAuthorized,\n    /**\n     * The NotFound model constructor.\n     * @property {module:model/NotFound}\n     */\n    NotFound: NotFound,\n    /**\n     * The Series model constructor.\n     * @property {module:model/Series}\n     */\n    Series: Series,\n    /**\n     * The SeriesActors model constructor.\n     * @property {module:model/SeriesActors}\n     */\n    SeriesActors: SeriesActors,\n    /**\n     * The SeriesActorsData model constructor.\n     * @property {module:model/SeriesActorsData}\n     */\n    SeriesActorsData: SeriesActorsData,\n    /**\n     * The SeriesData model constructor.\n     * @property {module:model/SeriesData}\n     */\n    SeriesData: SeriesData,\n    /**\n     * The SeriesEpisodes model constructor.\n     * @property {module:model/SeriesEpisodes}\n     */\n    SeriesEpisodes: SeriesEpisodes,\n    /**\n     * The SeriesEpisodesQuery model constructor.\n     * @property {module:model/SeriesEpisodesQuery}\n     */\n    SeriesEpisodesQuery: SeriesEpisodesQuery,\n    /**\n     * The SeriesEpisodesQueryParams model constructor.\n     * @property {module:model/SeriesEpisodesQueryParams}\n     */\n    SeriesEpisodesQueryParams: SeriesEpisodesQueryParams,\n    /**\n     * The SeriesEpisodesSummary model constructor.\n     * @property {module:model/SeriesEpisodesSummary}\n     */\n    SeriesEpisodesSummary: SeriesEpisodesSummary,\n    /**\n     * The SeriesImageQueryResult model constructor.\n     * @property {module:model/SeriesImageQueryResult}\n     */\n    SeriesImageQueryResult: SeriesImageQueryResult,\n    /**\n     * The SeriesImageQueryResults model constructor.\n     * @property {module:model/SeriesImageQueryResults}\n     */\n    SeriesImageQueryResults: SeriesImageQueryResults,\n    /**\n     * The SeriesImagesCount model constructor.\n     * @property {module:model/SeriesImagesCount}\n     */\n    SeriesImagesCount: SeriesImagesCount,\n    /**\n     * The SeriesImagesCounts model constructor.\n     * @property {module:model/SeriesImagesCounts}\n     */\n    SeriesImagesCounts: SeriesImagesCounts,\n    /**\n     * The SeriesImagesQueryParam model constructor.\n     * @property {module:model/SeriesImagesQueryParam}\n     */\n    SeriesImagesQueryParam: SeriesImagesQueryParam,\n    /**\n     * The SeriesImagesQueryParams model constructor.\n     * @property {module:model/SeriesImagesQueryParams}\n     */\n    SeriesImagesQueryParams: SeriesImagesQueryParams,\n    /**\n     * The SeriesSearchData model constructor.\n     * @property {module:model/SeriesSearchData}\n     */\n    SeriesSearchData: SeriesSearchData,\n    /**\n     * The Token model constructor.\n     * @property {module:model/Token}\n     */\n    Token: Token,\n    /**\n     * The Update model constructor.\n     * @property {module:model/Update}\n     */\n    Update: Update,\n    /**\n     * The UpdateData model constructor.\n     * @property {module:model/UpdateData}\n     */\n    UpdateData: UpdateData,\n    /**\n     * The UpdateDataQueryParams model constructor.\n     * @property {module:model/UpdateDataQueryParams}\n     */\n    UpdateDataQueryParams: UpdateDataQueryParams,\n    /**\n     * The User model constructor.\n     * @property {module:model/User}\n     */\n    User: User,\n    /**\n     * The UserData model constructor.\n     * @property {module:model/UserData}\n     */\n    UserData: UserData,\n    /**\n     * The UserFavorites model constructor.\n     * @property {module:model/UserFavorites}\n     */\n    UserFavorites: UserFavorites,\n    /**\n     * The UserFavoritesData model constructor.\n     * @property {module:model/UserFavoritesData}\n     */\n    UserFavoritesData: UserFavoritesData,\n    /**\n     * The UserRatings model constructor.\n     * @property {module:model/UserRatings}\n     */\n    UserRatings: UserRatings,\n    /**\n     * The UserRatingsData model constructor.\n     * @property {module:model/UserRatingsData}\n     */\n    UserRatingsData: UserRatingsData,\n    /**\n     * The UserRatingsDataNoLinks model constructor.\n     * @property {module:model/UserRatingsDataNoLinks}\n     */\n    UserRatingsDataNoLinks: UserRatingsDataNoLinks,\n    /**\n     * The UserRatingsQueryParams model constructor.\n     * @property {module:model/UserRatingsQueryParams}\n     */\n    UserRatingsQueryParams: UserRatingsQueryParams,\n    /**\n     * The AuthenticationApi service constructor.\n     * @property {module:api/AuthenticationApi}\n     */\n    AuthenticationApi: AuthenticationApi,\n    /**\n     * The EpisodesApi service constructor.\n     * @property {module:api/EpisodesApi}\n     */\n    EpisodesApi: EpisodesApi,\n    /**\n     * The LanguagesApi service constructor.\n     * @property {module:api/LanguagesApi}\n     */\n    LanguagesApi: LanguagesApi,\n    /**\n     * The SearchApi service constructor.\n     * @property {module:api/SearchApi}\n     */\n    SearchApi: SearchApi,\n    /**\n     * The SeriesApi service constructor.\n     * @property {module:api/SeriesApi}\n     */\n    SeriesApi: SeriesApi,\n    /**\n     * The UpdatesApi service constructor.\n     * @property {module:api/UpdatesApi}\n     */\n    UpdatesApi: UpdatesApi,\n    /**\n     * The UsersApi service constructor.\n     * @property {module:api/UsersApi}\n     */\n    UsersApi: UsersApi\n  };\n\n  return exports;\n}));\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Auth = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Auth model module.\n   * @module model/Auth\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Auth</code>.\n   * @alias module:model/Auth\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Auth</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Auth} obj Optional instance to populate.\n   * @return {module:model/Auth} The populated <code>Auth</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('apikey')) {\n        obj['apikey'] = ApiClient.convertToType(data['apikey'], 'String');\n      }\n      if (data.hasOwnProperty('userkey')) {\n        obj['userkey'] = ApiClient.convertToType(data['userkey'], 'String');\n      }\n      if (data.hasOwnProperty('username')) {\n        obj['username'] = ApiClient.convertToType(data['username'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} apikey\n   */\n  exports.prototype['apikey'] = undefined;\n  /**\n   * @member {String} userkey\n   */\n  exports.prototype['userkey'] = undefined;\n  /**\n   * @member {String} username\n   */\n  exports.prototype['username'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.AuthenticationString = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The AuthenticationString model module.\n   * @module model/AuthenticationString\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>AuthenticationString</code>.\n   * @alias module:model/AuthenticationString\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>AuthenticationString</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/AuthenticationString} obj Optional instance to populate.\n   * @return {module:model/AuthenticationString} The populated <code>AuthenticationString</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('apikey')) {\n        obj['apikey'] = ApiClient.convertToType(data['apikey'], 'String');\n      }\n      if (data.hasOwnProperty('userkey')) {\n        obj['userkey'] = ApiClient.convertToType(data['userkey'], 'String');\n      }\n      if (data.hasOwnProperty('username')) {\n        obj['username'] = ApiClient.convertToType(data['username'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} apikey\n   */\n  exports.prototype['apikey'] = undefined;\n  /**\n   * @member {String} userkey\n   */\n  exports.prototype['userkey'] = undefined;\n  /**\n   * @member {String} username\n   */\n  exports.prototype['username'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.BasicEpisode = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The BasicEpisode model module.\n   * @module model/BasicEpisode\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>BasicEpisode</code>.\n   * @alias module:model/BasicEpisode\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>BasicEpisode</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/BasicEpisode} obj Optional instance to populate.\n   * @return {module:model/BasicEpisode} The populated <code>BasicEpisode</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('absoluteNumber')) {\n        obj['absoluteNumber'] = ApiClient.convertToType(data['absoluteNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedEpisodeNumber')) {\n        obj['airedEpisodeNumber'] = ApiClient.convertToType(data['airedEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedSeason')) {\n        obj['airedSeason'] = ApiClient.convertToType(data['airedSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdEpisodeNumber')) {\n        obj['dvdEpisodeNumber'] = ApiClient.convertToType(data['dvdEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdSeason')) {\n        obj['dvdSeason'] = ApiClient.convertToType(data['dvdSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('episodeName')) {\n        obj['episodeName'] = ApiClient.convertToType(data['episodeName'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} absoluteNumber\n   */\n  exports.prototype['absoluteNumber'] = undefined;\n  /**\n   * @member {Number} airedEpisodeNumber\n   */\n  exports.prototype['airedEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} airedSeason\n   */\n  exports.prototype['airedSeason'] = undefined;\n  /**\n   * @member {Number} dvdEpisodeNumber\n   */\n  exports.prototype['dvdEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} dvdSeason\n   */\n  exports.prototype['dvdSeason'] = undefined;\n  /**\n   * @member {String} episodeName\n   */\n  exports.prototype['episodeName'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Conflict = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Conflict model module.\n   * @module model/Conflict\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Conflict</code>.\n   * @alias module:model/Conflict\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>Conflict</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Conflict} obj Optional instance to populate.\n   * @return {module:model/Conflict} The populated <code>Conflict</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Conflict'\n   */\n  exports.prototype['Error'] = 'Conflict';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Episode = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Episode model module.\n   * @module model/Episode\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Episode</code>.\n   * @alias module:model/Episode\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Episode</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Episode} obj Optional instance to populate.\n   * @return {module:model/Episode} The populated <code>Episode</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('absoluteNumber')) {\n        obj['absoluteNumber'] = ApiClient.convertToType(data['absoluteNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedEpisodeNumber')) {\n        obj['airedEpisodeNumber'] = ApiClient.convertToType(data['airedEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedSeason')) {\n        obj['airedSeason'] = ApiClient.convertToType(data['airedSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('airsAfterSeason')) {\n        obj['airsAfterSeason'] = ApiClient.convertToType(data['airsAfterSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('airsBeforeEpisode')) {\n        obj['airsBeforeEpisode'] = ApiClient.convertToType(data['airsBeforeEpisode'], 'Number');\n      }\n      if (data.hasOwnProperty('airsBeforeSeason')) {\n        obj['airsBeforeSeason'] = ApiClient.convertToType(data['airsBeforeSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('director')) {\n        obj['director'] = ApiClient.convertToType(data['director'], 'String');\n      }\n      if (data.hasOwnProperty('directors')) {\n        obj['directors'] = ApiClient.convertToType(data['directors'], ['String']);\n      }\n      if (data.hasOwnProperty('dvdChapter')) {\n        obj['dvdChapter'] = ApiClient.convertToType(data['dvdChapter'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdDiscid')) {\n        obj['dvdDiscid'] = ApiClient.convertToType(data['dvdDiscid'], 'String');\n      }\n      if (data.hasOwnProperty('dvdEpisodeNumber')) {\n        obj['dvdEpisodeNumber'] = ApiClient.convertToType(data['dvdEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdSeason')) {\n        obj['dvdSeason'] = ApiClient.convertToType(data['dvdSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('episodeName')) {\n        obj['episodeName'] = ApiClient.convertToType(data['episodeName'], 'String');\n      }\n      if (data.hasOwnProperty('filename')) {\n        obj['filename'] = ApiClient.convertToType(data['filename'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('guestStars')) {\n        obj['guestStars'] = ApiClient.convertToType(data['guestStars'], ['String']);\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('imdbId')) {\n        obj['imdbId'] = ApiClient.convertToType(data['imdbId'], 'String');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdatedBy')) {\n        obj['lastUpdatedBy'] = ApiClient.convertToType(data['lastUpdatedBy'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('productionCode')) {\n        obj['productionCode'] = ApiClient.convertToType(data['productionCode'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'String');\n      }\n      if (data.hasOwnProperty('showUrl')) {\n        obj['showUrl'] = ApiClient.convertToType(data['showUrl'], 'String');\n      }\n      if (data.hasOwnProperty('siteRating')) {\n        obj['siteRating'] = ApiClient.convertToType(data['siteRating'], 'Number');\n      }\n      if (data.hasOwnProperty('siteRatingCount')) {\n        obj['siteRatingCount'] = ApiClient.convertToType(data['siteRatingCount'], 'Number');\n      }\n      if (data.hasOwnProperty('thumbAdded')) {\n        obj['thumbAdded'] = ApiClient.convertToType(data['thumbAdded'], 'String');\n      }\n      if (data.hasOwnProperty('thumbAuthor')) {\n        obj['thumbAuthor'] = ApiClient.convertToType(data['thumbAuthor'], 'Number');\n      }\n      if (data.hasOwnProperty('thumbHeight')) {\n        obj['thumbHeight'] = ApiClient.convertToType(data['thumbHeight'], 'String');\n      }\n      if (data.hasOwnProperty('thumbWidth')) {\n        obj['thumbWidth'] = ApiClient.convertToType(data['thumbWidth'], 'String');\n      }\n      if (data.hasOwnProperty('writers')) {\n        obj['writers'] = ApiClient.convertToType(data['writers'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} absoluteNumber\n   */\n  exports.prototype['absoluteNumber'] = undefined;\n  /**\n   * @member {Number} airedEpisodeNumber\n   */\n  exports.prototype['airedEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} airedSeason\n   */\n  exports.prototype['airedSeason'] = undefined;\n  /**\n   * @member {Number} airsAfterSeason\n   */\n  exports.prototype['airsAfterSeason'] = undefined;\n  /**\n   * @member {Number} airsBeforeEpisode\n   */\n  exports.prototype['airsBeforeEpisode'] = undefined;\n  /**\n   * @member {Number} airsBeforeSeason\n   */\n  exports.prototype['airsBeforeSeason'] = undefined;\n  /**\n   * @member {String} director\n   */\n  exports.prototype['director'] = undefined;\n  /**\n   * @member {Array.<String>} directors\n   */\n  exports.prototype['directors'] = undefined;\n  /**\n   * @member {Number} dvdChapter\n   */\n  exports.prototype['dvdChapter'] = undefined;\n  /**\n   * @member {String} dvdDiscid\n   */\n  exports.prototype['dvdDiscid'] = undefined;\n  /**\n   * @member {Number} dvdEpisodeNumber\n   */\n  exports.prototype['dvdEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} dvdSeason\n   */\n  exports.prototype['dvdSeason'] = undefined;\n  /**\n   * @member {String} episodeName\n   */\n  exports.prototype['episodeName'] = undefined;\n  /**\n   * @member {String} filename\n   */\n  exports.prototype['filename'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Array.<String>} guestStars\n   */\n  exports.prototype['guestStars'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} imdbId\n   */\n  exports.prototype['imdbId'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} lastUpdatedBy\n   */\n  exports.prototype['lastUpdatedBy'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} productionCode\n   */\n  exports.prototype['productionCode'] = undefined;\n  /**\n   * @member {String} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {String} showUrl\n   */\n  exports.prototype['showUrl'] = undefined;\n  /**\n   * @member {Number} siteRating\n   */\n  exports.prototype['siteRating'] = undefined;\n  /**\n   * @member {Number} siteRatingCount\n   */\n  exports.prototype['siteRatingCount'] = undefined;\n  /**\n   * @member {String} thumbAdded\n   */\n  exports.prototype['thumbAdded'] = undefined;\n  /**\n   * @member {Number} thumbAuthor\n   */\n  exports.prototype['thumbAuthor'] = undefined;\n  /**\n   * @member {String} thumbHeight\n   */\n  exports.prototype['thumbHeight'] = undefined;\n  /**\n   * @member {String} thumbWidth\n   */\n  exports.prototype['thumbWidth'] = undefined;\n  /**\n   * @member {Array.<String>} writers\n   */\n  exports.prototype['writers'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.EpisodeDataQueryParams = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The EpisodeDataQueryParams model module.\n   * @module model/EpisodeDataQueryParams\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>EpisodeDataQueryParams</code>.\n   * @alias module:model/EpisodeDataQueryParams\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>EpisodeDataQueryParams</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/EpisodeDataQueryParams} obj Optional instance to populate.\n   * @return {module:model/EpisodeDataQueryParams} The populated <code>EpisodeDataQueryParams</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse200Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse200Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.EpisodeRecordData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse200Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse200Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The EpisodeRecordData model module.\n   * @module model/EpisodeRecordData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>EpisodeRecordData</code>.\n   * @alias module:model/EpisodeRecordData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>EpisodeRecordData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/EpisodeRecordData} obj Optional instance to populate.\n   * @return {module:model/EpisodeRecordData} The populated <code>EpisodeRecordData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse200Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse200Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.FilterKeys = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The FilterKeys model module.\n   * @module model/FilterKeys\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>FilterKeys</code>.\n   * @alias module:model/FilterKeys\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>FilterKeys</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/FilterKeys} obj Optional instance to populate.\n   * @return {module:model/FilterKeys} The populated <code>FilterKeys</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse200Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse200Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse200 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse200Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse200Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse200 model module.\n   * @module model/InlineResponse200\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse200</code>.\n   * @alias module:model/InlineResponse200\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse200</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse200} obj Optional instance to populate.\n   * @return {module:model/InlineResponse200} The populated <code>InlineResponse200</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse200Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse200Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2001Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2001Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2001 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2001Data);\n  }\n}(this, function(ApiClient, InlineResponse2001Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2001 model module.\n   * @module model/InlineResponse2001\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2001</code>.\n   * @alias module:model/InlineResponse2001\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2001</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2001} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2001} The populated <code>InlineResponse2001</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2001Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2001Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20010Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20010Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20010 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20010Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20010Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20010 model module.\n   * @module model/InlineResponse20010\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20010</code>.\n   * @alias module:model/InlineResponse20010\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20010</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20010} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20010} The populated <code>InlineResponse20010</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20010Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20010Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20010RatingsInfo'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20010RatingsInfo'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20010Data = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20010RatingsInfo);\n  }\n}(this, function(ApiClient, InlineResponse20010RatingsInfo) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20010Data model module.\n   * @module model/InlineResponse20010Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20010Data</code>.\n   * @alias module:model/InlineResponse20010Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20010Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20010Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20010Data} The populated <code>InlineResponse20010Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('fileName')) {\n        obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('keyType')) {\n        obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');\n      }\n      if (data.hasOwnProperty('languageId')) {\n        obj['languageId'] = ApiClient.convertToType(data['languageId'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingsInfo')) {\n        obj['ratingsInfo'] = InlineResponse20010RatingsInfo.constructFromObject(data['ratingsInfo']);\n      }\n      if (data.hasOwnProperty('resolution')) {\n        obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');\n      }\n      if (data.hasOwnProperty('subKey')) {\n        obj['subKey'] = ApiClient.convertToType(data['subKey'], 'String');\n      }\n      if (data.hasOwnProperty('thumbnail')) {\n        obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} fileName\n   */\n  exports.prototype['fileName'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} keyType\n   */\n  exports.prototype['keyType'] = undefined;\n  /**\n   * @member {Number} languageId\n   */\n  exports.prototype['languageId'] = undefined;\n  /**\n   * @member {module:model/InlineResponse20010RatingsInfo} ratingsInfo\n   */\n  exports.prototype['ratingsInfo'] = undefined;\n  /**\n   * @member {String} resolution\n   */\n  exports.prototype['resolution'] = undefined;\n  /**\n   * @member {String} subKey\n   */\n  exports.prototype['subKey'] = undefined;\n  /**\n   * @member {String} thumbnail\n   */\n  exports.prototype['thumbnail'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20010RatingsInfo = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20010RatingsInfo model module.\n   * @module model/InlineResponse20010RatingsInfo\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20010RatingsInfo</code>.\n   * @alias module:model/InlineResponse20010RatingsInfo\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20010RatingsInfo</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20010RatingsInfo} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20010RatingsInfo} The populated <code>InlineResponse20010RatingsInfo</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('average')) {\n        obj['average'] = ApiClient.convertToType(data['average'], 'Number');\n      }\n      if (data.hasOwnProperty('count')) {\n        obj['count'] = ApiClient.convertToType(data['count'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Average rating for the given record.\n   * @member {Number} average\n   */\n  exports.prototype['average'] = undefined;\n  /**\n   * Number of ratings for the given record.\n   * @member {Number} count\n   */\n  exports.prototype['count'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20011Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20011Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20011 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20011Data);\n  }\n}(this, function(ApiClient, InlineResponse20011Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20011 model module.\n   * @module model/InlineResponse20011\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20011</code>.\n   * @alias module:model/InlineResponse20011\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20011</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20011} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20011} The populated <code>InlineResponse20011</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20011Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20011Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20011Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20011Data model module.\n   * @module model/InlineResponse20011Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20011Data</code>.\n   * @alias module:model/InlineResponse20011Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20011Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20011Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20011Data} The populated <code>InlineResponse20011Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('keyType')) {\n        obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');\n      }\n      if (data.hasOwnProperty('languageId')) {\n        obj['languageId'] = ApiClient.convertToType(data['languageId'], 'String');\n      }\n      if (data.hasOwnProperty('resolution')) {\n        obj['resolution'] = ApiClient.convertToType(data['resolution'], ['String']);\n      }\n      if (data.hasOwnProperty('subKey')) {\n        obj['subKey'] = ApiClient.convertToType(data['subKey'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} keyType\n   */\n  exports.prototype['keyType'] = undefined;\n  /**\n   * @member {String} languageId\n   */\n  exports.prototype['languageId'] = undefined;\n  /**\n   * @member {Array.<String>} resolution\n   */\n  exports.prototype['resolution'] = undefined;\n  /**\n   * @member {Array.<String>} subKey\n   */\n  exports.prototype['subKey'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20012Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20012Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20012 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20012Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20012Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20012 model module.\n   * @module model/InlineResponse20012\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20012</code>.\n   * @alias module:model/InlineResponse20012\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20012</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20012} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20012} The populated <code>InlineResponse20012</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20012Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20012Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20012Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20012Data model module.\n   * @module model/InlineResponse20012Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20012Data</code>.\n   * @alias module:model/InlineResponse20012Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20012Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20012Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20012Data} The populated <code>InlineResponse20012Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20013Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20013Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20013 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20013Data);\n  }\n}(this, function(ApiClient, InlineResponse20013Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20013 model module.\n   * @module model/InlineResponse20013\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20013</code>.\n   * @alias module:model/InlineResponse20013\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20013</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20013} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20013} The populated <code>InlineResponse20013</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse20013Data.constructFromObject(data['data']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse20013Data} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20013Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20013Data model module.\n   * @module model/InlineResponse20013Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20013Data</code>.\n   * @alias module:model/InlineResponse20013Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20013Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20013Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20013Data} The populated <code>InlineResponse20013Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('favoritesDisplaymode')) {\n        obj['favoritesDisplaymode'] = ApiClient.convertToType(data['favoritesDisplaymode'], 'String');\n      }\n      if (data.hasOwnProperty('language')) {\n        obj['language'] = ApiClient.convertToType(data['language'], 'String');\n      }\n      if (data.hasOwnProperty('userName')) {\n        obj['userName'] = ApiClient.convertToType(data['userName'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} favoritesDisplaymode\n   */\n  exports.prototype['favoritesDisplaymode'] = undefined;\n  /**\n   * @member {String} language\n   */\n  exports.prototype['language'] = undefined;\n  /**\n   * @member {String} userName\n   */\n  exports.prototype['userName'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20014Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20014Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20014 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20014Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20014Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20014 model module.\n   * @module model/InlineResponse20014\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20014</code>.\n   * @alias module:model/InlineResponse20014\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20014</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20014} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20014} The populated <code>InlineResponse20014</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse20014Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse20014Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20014Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20014Data model module.\n   * @module model/InlineResponse20014Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20014Data</code>.\n   * @alias module:model/InlineResponse20014Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20014Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20014Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20014Data} The populated <code>InlineResponse20014Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('favorites')) {\n        obj['favorites'] = ApiClient.convertToType(data['favorites'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} favorites\n   */\n  exports.prototype['favorites'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20015Data', 'model/InlineResponse2007Links', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20015Data'), require('./InlineResponse2007Links'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20015 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20015Data, root.TheTvdbApiV2.InlineResponse2007Links, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20015Data, InlineResponse2007Links, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20015 model module.\n   * @module model/InlineResponse20015\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20015</code>.\n   * @alias module:model/InlineResponse20015\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20015</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20015} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20015} The populated <code>InlineResponse20015</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20015Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n      if (data.hasOwnProperty('links')) {\n        obj['links'] = InlineResponse2007Links.constructFromObject(data['links']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20015Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n  /**\n   * @member {module:model/InlineResponse2007Links} links\n   */\n  exports.prototype['links'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20015Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20015Data model module.\n   * @module model/InlineResponse20015Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20015Data</code>.\n   * @alias module:model/InlineResponse20015Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20015Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20015Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20015Data} The populated <code>InlineResponse20015Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('rating')) {\n        obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingItemId')) {\n        obj['ratingItemId'] = ApiClient.convertToType(data['ratingItemId'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingType')) {\n        obj['ratingType'] = ApiClient.convertToType(data['ratingType'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} rating\n   */\n  exports.prototype['rating'] = undefined;\n  /**\n   * @member {Number} ratingItemId\n   */\n  exports.prototype['ratingItemId'] = undefined;\n  /**\n   * @member {String} ratingType\n   */\n  exports.prototype['ratingType'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20015Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20015Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse20016 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20015Data);\n  }\n}(this, function(ApiClient, InlineResponse20015Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse20016 model module.\n   * @module model/InlineResponse20016\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse20016</code>.\n   * @alias module:model/InlineResponse20016\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse20016</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse20016} obj Optional instance to populate.\n   * @return {module:model/InlineResponse20016} The populated <code>InlineResponse20016</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20015Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20015Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2001Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2001Data model module.\n   * @module model/InlineResponse2001Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2001Data</code>.\n   * @alias module:model/InlineResponse2001Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2001Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2001Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2001Data} The populated <code>InlineResponse2001Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('abbreviation')) {\n        obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');\n      }\n      if (data.hasOwnProperty('englishName')) {\n        obj['englishName'] = ApiClient.convertToType(data['englishName'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} abbreviation\n   */\n  exports.prototype['abbreviation'] = undefined;\n  /**\n   * @member {String} englishName\n   */\n  exports.prototype['englishName'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2002 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2002 model module.\n   * @module model/InlineResponse2002\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2002</code>.\n   * @alias module:model/InlineResponse2002\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2002</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2002} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2002} The populated <code>InlineResponse2002</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('token')) {\n        obj['token'] = ApiClient.convertToType(data['token'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} token\n   */\n  exports.prototype['token'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2003 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2003 model module.\n   * @module model/InlineResponse2003\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2003</code>.\n   * @alias module:model/InlineResponse2003\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2003</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2003} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2003} The populated <code>InlineResponse2003</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('aliases')) {\n        obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);\n      }\n      if (data.hasOwnProperty('banner')) {\n        obj['banner'] = ApiClient.convertToType(data['banner'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('network')) {\n        obj['network'] = ApiClient.convertToType(data['network'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('seriesName')) {\n        obj['seriesName'] = ApiClient.convertToType(data['seriesName'], 'String');\n      }\n      if (data.hasOwnProperty('status')) {\n        obj['status'] = ApiClient.convertToType(data['status'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} aliases\n   */\n  exports.prototype['aliases'] = undefined;\n  /**\n   * @member {String} banner\n   */\n  exports.prototype['banner'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} network\n   */\n  exports.prototype['network'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} seriesName\n   */\n  exports.prototype['seriesName'] = undefined;\n  /**\n   * @member {String} status\n   */\n  exports.prototype['status'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2004 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2004 model module.\n   * @module model/InlineResponse2004\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2004</code>.\n   * @alias module:model/InlineResponse2004\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2004</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2004} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2004} The populated <code>InlineResponse2004</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2005Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2005Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2005 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2005Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2005Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2005 model module.\n   * @module model/InlineResponse2005\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2005</code>.\n   * @alias module:model/InlineResponse2005\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2005</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2005} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2005} The populated <code>InlineResponse2005</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse2005Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse2005Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2005Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2005Data model module.\n   * @module model/InlineResponse2005Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2005Data</code>.\n   * @alias module:model/InlineResponse2005Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2005Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2005Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2005Data} The populated <code>InlineResponse2005Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('added')) {\n        obj['added'] = ApiClient.convertToType(data['added'], 'String');\n      }\n      if (data.hasOwnProperty('airsDayOfWeek')) {\n        obj['airsDayOfWeek'] = ApiClient.convertToType(data['airsDayOfWeek'], 'String');\n      }\n      if (data.hasOwnProperty('airsTime')) {\n        obj['airsTime'] = ApiClient.convertToType(data['airsTime'], 'String');\n      }\n      if (data.hasOwnProperty('aliases')) {\n        obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);\n      }\n      if (data.hasOwnProperty('banner')) {\n        obj['banner'] = ApiClient.convertToType(data['banner'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('genre')) {\n        obj['genre'] = ApiClient.convertToType(data['genre'], ['String']);\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('imdbId')) {\n        obj['imdbId'] = ApiClient.convertToType(data['imdbId'], 'String');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('network')) {\n        obj['network'] = ApiClient.convertToType(data['network'], 'String');\n      }\n      if (data.hasOwnProperty('networkId')) {\n        obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('rating')) {\n        obj['rating'] = ApiClient.convertToType(data['rating'], 'String');\n      }\n      if (data.hasOwnProperty('runtime')) {\n        obj['runtime'] = ApiClient.convertToType(data['runtime'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'Number');\n      }\n      if (data.hasOwnProperty('seriesName')) {\n        obj['seriesName'] = ApiClient.convertToType(data['seriesName'], 'String');\n      }\n      if (data.hasOwnProperty('siteRating')) {\n        obj['siteRating'] = ApiClient.convertToType(data['siteRating'], 'Number');\n      }\n      if (data.hasOwnProperty('siteRatingCount')) {\n        obj['siteRatingCount'] = ApiClient.convertToType(data['siteRatingCount'], 'Number');\n      }\n      if (data.hasOwnProperty('status')) {\n        obj['status'] = ApiClient.convertToType(data['status'], 'String');\n      }\n      if (data.hasOwnProperty('zap2itId')) {\n        obj['zap2itId'] = ApiClient.convertToType(data['zap2itId'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} added\n   */\n  exports.prototype['added'] = undefined;\n  /**\n   * @member {String} airsDayOfWeek\n   */\n  exports.prototype['airsDayOfWeek'] = undefined;\n  /**\n   * @member {String} airsTime\n   */\n  exports.prototype['airsTime'] = undefined;\n  /**\n   * @member {Array.<String>} aliases\n   */\n  exports.prototype['aliases'] = undefined;\n  /**\n   * @member {String} banner\n   */\n  exports.prototype['banner'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Array.<String>} genre\n   */\n  exports.prototype['genre'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} imdbId\n   */\n  exports.prototype['imdbId'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} network\n   */\n  exports.prototype['network'] = undefined;\n  /**\n   * @member {String} networkId\n   */\n  exports.prototype['networkId'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} rating\n   */\n  exports.prototype['rating'] = undefined;\n  /**\n   * @member {String} runtime\n   */\n  exports.prototype['runtime'] = undefined;\n  /**\n   * @member {Number} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {String} seriesName\n   */\n  exports.prototype['seriesName'] = undefined;\n  /**\n   * @member {Number} siteRating\n   */\n  exports.prototype['siteRating'] = undefined;\n  /**\n   * @member {Number} siteRatingCount\n   */\n  exports.prototype['siteRatingCount'] = undefined;\n  /**\n   * @member {String} status\n   */\n  exports.prototype['status'] = undefined;\n  /**\n   * @member {String} zap2itId\n   */\n  exports.prototype['zap2itId'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2006Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2006Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2006 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2006Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2006Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2006 model module.\n   * @module model/InlineResponse2006\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2006</code>.\n   * @alias module:model/InlineResponse2006\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2006</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2006} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2006} The populated <code>InlineResponse2006</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2006Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2006Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2006Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2006Data model module.\n   * @module model/InlineResponse2006Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2006Data</code>.\n   * @alias module:model/InlineResponse2006Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2006Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2006Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2006Data} The populated <code>InlineResponse2006Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('image')) {\n        obj['image'] = ApiClient.convertToType(data['image'], 'String');\n      }\n      if (data.hasOwnProperty('imageAdded')) {\n        obj['imageAdded'] = ApiClient.convertToType(data['imageAdded'], 'String');\n      }\n      if (data.hasOwnProperty('imageAuthor')) {\n        obj['imageAuthor'] = ApiClient.convertToType(data['imageAuthor'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('role')) {\n        obj['role'] = ApiClient.convertToType(data['role'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'Number');\n      }\n      if (data.hasOwnProperty('sortOrder')) {\n        obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} image\n   */\n  exports.prototype['image'] = undefined;\n  /**\n   * @member {String} imageAdded\n   */\n  exports.prototype['imageAdded'] = undefined;\n  /**\n   * @member {Number} imageAuthor\n   */\n  exports.prototype['imageAuthor'] = undefined;\n  /**\n   * @member {String} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * @member {String} role\n   */\n  exports.prototype['role'] = undefined;\n  /**\n   * @member {Number} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {Number} sortOrder\n   */\n  exports.prototype['sortOrder'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2007Data', 'model/InlineResponse2007Links', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2007Data'), require('./InlineResponse2007Links'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2007 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2007Data, root.TheTvdbApiV2.InlineResponse2007Links, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2007Data, InlineResponse2007Links, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2007 model module.\n   * @module model/InlineResponse2007\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2007</code>.\n   * @alias module:model/InlineResponse2007\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2007</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2007} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2007} The populated <code>InlineResponse2007</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2007Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n      if (data.hasOwnProperty('links')) {\n        obj['links'] = InlineResponse2007Links.constructFromObject(data['links']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2007Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n  /**\n   * @member {module:model/InlineResponse2007Links} links\n   */\n  exports.prototype['links'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2007Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2007Data model module.\n   * @module model/InlineResponse2007Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2007Data</code>.\n   * @alias module:model/InlineResponse2007Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2007Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2007Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2007Data} The populated <code>InlineResponse2007Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('absoluteNumber')) {\n        obj['absoluteNumber'] = ApiClient.convertToType(data['absoluteNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedEpisodeNumber')) {\n        obj['airedEpisodeNumber'] = ApiClient.convertToType(data['airedEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedSeason')) {\n        obj['airedSeason'] = ApiClient.convertToType(data['airedSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdEpisodeNumber')) {\n        obj['dvdEpisodeNumber'] = ApiClient.convertToType(data['dvdEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdSeason')) {\n        obj['dvdSeason'] = ApiClient.convertToType(data['dvdSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('episodeName')) {\n        obj['episodeName'] = ApiClient.convertToType(data['episodeName'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} absoluteNumber\n   */\n  exports.prototype['absoluteNumber'] = undefined;\n  /**\n   * @member {Number} airedEpisodeNumber\n   */\n  exports.prototype['airedEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} airedSeason\n   */\n  exports.prototype['airedSeason'] = undefined;\n  /**\n   * @member {Number} dvdEpisodeNumber\n   */\n  exports.prototype['dvdEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} dvdSeason\n   */\n  exports.prototype['dvdSeason'] = undefined;\n  /**\n   * @member {String} episodeName\n   */\n  exports.prototype['episodeName'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2007Links = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2007Links model module.\n   * @module model/InlineResponse2007Links\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2007Links</code>.\n   * @alias module:model/InlineResponse2007Links\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2007Links</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2007Links} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2007Links} The populated <code>InlineResponse2007Links</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('first')) {\n        obj['first'] = ApiClient.convertToType(data['first'], 'Number');\n      }\n      if (data.hasOwnProperty('last')) {\n        obj['last'] = ApiClient.convertToType(data['last'], 'Number');\n      }\n      if (data.hasOwnProperty('next')) {\n        obj['next'] = ApiClient.convertToType(data['next'], 'Number');\n      }\n      if (data.hasOwnProperty('previous')) {\n        obj['previous'] = ApiClient.convertToType(data['previous'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} first\n   */\n  exports.prototype['first'] = undefined;\n  /**\n   * @member {Number} last\n   */\n  exports.prototype['last'] = undefined;\n  /**\n   * @member {Number} next\n   */\n  exports.prototype['next'] = undefined;\n  /**\n   * @member {Number} previous\n   */\n  exports.prototype['previous'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2008 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2008 model module.\n   * @module model/InlineResponse2008\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2008</code>.\n   * @alias module:model/InlineResponse2008\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2008</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2008} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2008} The populated <code>InlineResponse2008</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('airedEpisodes')) {\n        obj['airedEpisodes'] = ApiClient.convertToType(data['airedEpisodes'], 'String');\n      }\n      if (data.hasOwnProperty('airedSeasons')) {\n        obj['airedSeasons'] = ApiClient.convertToType(data['airedSeasons'], ['String']);\n      }\n      if (data.hasOwnProperty('dvdEpisodes')) {\n        obj['dvdEpisodes'] = ApiClient.convertToType(data['dvdEpisodes'], 'String');\n      }\n      if (data.hasOwnProperty('dvdSeasons')) {\n        obj['dvdSeasons'] = ApiClient.convertToType(data['dvdSeasons'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Number of all aired episodes for this series\n   * @member {String} airedEpisodes\n   */\n  exports.prototype['airedEpisodes'] = undefined;\n  /**\n   * @member {Array.<String>} airedSeasons\n   */\n  exports.prototype['airedSeasons'] = undefined;\n  /**\n   * Number of all dvd episodes for this series\n   * @member {String} dvdEpisodes\n   */\n  exports.prototype['dvdEpisodes'] = undefined;\n  /**\n   * @member {Array.<String>} dvdSeasons\n   */\n  exports.prototype['dvdSeasons'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2009Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2009Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2009 = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2009Data);\n  }\n}(this, function(ApiClient, InlineResponse2009Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2009 model module.\n   * @module model/InlineResponse2009\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2009</code>.\n   * @alias module:model/InlineResponse2009\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2009</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2009} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2009} The populated <code>InlineResponse2009</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse2009Data.constructFromObject(data['data']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse2009Data} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse2009Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse2009Data model module.\n   * @module model/InlineResponse2009Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse2009Data</code>.\n   * @alias module:model/InlineResponse2009Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse2009Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse2009Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse2009Data} The populated <code>InlineResponse2009Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('fanart')) {\n        obj['fanart'] = ApiClient.convertToType(data['fanart'], 'Number');\n      }\n      if (data.hasOwnProperty('poster')) {\n        obj['poster'] = ApiClient.convertToType(data['poster'], 'Number');\n      }\n      if (data.hasOwnProperty('season')) {\n        obj['season'] = ApiClient.convertToType(data['season'], 'Number');\n      }\n      if (data.hasOwnProperty('seasonwide')) {\n        obj['seasonwide'] = ApiClient.convertToType(data['seasonwide'], 'Number');\n      }\n      if (data.hasOwnProperty('series')) {\n        obj['series'] = ApiClient.convertToType(data['series'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} fanart\n   */\n  exports.prototype['fanart'] = undefined;\n  /**\n   * @member {Number} poster\n   */\n  exports.prototype['poster'] = undefined;\n  /**\n   * @member {Number} season\n   */\n  exports.prototype['season'] = undefined;\n  /**\n   * @member {Number} seasonwide\n   */\n  exports.prototype['seasonwide'] = undefined;\n  /**\n   * @member {Number} series\n   */\n  exports.prototype['series'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse200Data = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse200Data model module.\n   * @module model/InlineResponse200Data\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse200Data</code>.\n   * @alias module:model/InlineResponse200Data\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse200Data</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse200Data} obj Optional instance to populate.\n   * @return {module:model/InlineResponse200Data} The populated <code>InlineResponse200Data</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('absoluteNumber')) {\n        obj['absoluteNumber'] = ApiClient.convertToType(data['absoluteNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedEpisodeNumber')) {\n        obj['airedEpisodeNumber'] = ApiClient.convertToType(data['airedEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('airedSeason')) {\n        obj['airedSeason'] = ApiClient.convertToType(data['airedSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('airsAfterSeason')) {\n        obj['airsAfterSeason'] = ApiClient.convertToType(data['airsAfterSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('airsBeforeEpisode')) {\n        obj['airsBeforeEpisode'] = ApiClient.convertToType(data['airsBeforeEpisode'], 'Number');\n      }\n      if (data.hasOwnProperty('airsBeforeSeason')) {\n        obj['airsBeforeSeason'] = ApiClient.convertToType(data['airsBeforeSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('director')) {\n        obj['director'] = ApiClient.convertToType(data['director'], 'String');\n      }\n      if (data.hasOwnProperty('directors')) {\n        obj['directors'] = ApiClient.convertToType(data['directors'], ['String']);\n      }\n      if (data.hasOwnProperty('dvdChapter')) {\n        obj['dvdChapter'] = ApiClient.convertToType(data['dvdChapter'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdDiscid')) {\n        obj['dvdDiscid'] = ApiClient.convertToType(data['dvdDiscid'], 'String');\n      }\n      if (data.hasOwnProperty('dvdEpisodeNumber')) {\n        obj['dvdEpisodeNumber'] = ApiClient.convertToType(data['dvdEpisodeNumber'], 'Number');\n      }\n      if (data.hasOwnProperty('dvdSeason')) {\n        obj['dvdSeason'] = ApiClient.convertToType(data['dvdSeason'], 'Number');\n      }\n      if (data.hasOwnProperty('episodeName')) {\n        obj['episodeName'] = ApiClient.convertToType(data['episodeName'], 'String');\n      }\n      if (data.hasOwnProperty('filename')) {\n        obj['filename'] = ApiClient.convertToType(data['filename'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('guestStars')) {\n        obj['guestStars'] = ApiClient.convertToType(data['guestStars'], ['String']);\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('imdbId')) {\n        obj['imdbId'] = ApiClient.convertToType(data['imdbId'], 'String');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdatedBy')) {\n        obj['lastUpdatedBy'] = ApiClient.convertToType(data['lastUpdatedBy'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('productionCode')) {\n        obj['productionCode'] = ApiClient.convertToType(data['productionCode'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'String');\n      }\n      if (data.hasOwnProperty('showUrl')) {\n        obj['showUrl'] = ApiClient.convertToType(data['showUrl'], 'String');\n      }\n      if (data.hasOwnProperty('siteRating')) {\n        obj['siteRating'] = ApiClient.convertToType(data['siteRating'], 'Number');\n      }\n      if (data.hasOwnProperty('siteRatingCount')) {\n        obj['siteRatingCount'] = ApiClient.convertToType(data['siteRatingCount'], 'Number');\n      }\n      if (data.hasOwnProperty('thumbAdded')) {\n        obj['thumbAdded'] = ApiClient.convertToType(data['thumbAdded'], 'String');\n      }\n      if (data.hasOwnProperty('thumbAuthor')) {\n        obj['thumbAuthor'] = ApiClient.convertToType(data['thumbAuthor'], 'Number');\n      }\n      if (data.hasOwnProperty('thumbHeight')) {\n        obj['thumbHeight'] = ApiClient.convertToType(data['thumbHeight'], 'String');\n      }\n      if (data.hasOwnProperty('thumbWidth')) {\n        obj['thumbWidth'] = ApiClient.convertToType(data['thumbWidth'], 'String');\n      }\n      if (data.hasOwnProperty('writers')) {\n        obj['writers'] = ApiClient.convertToType(data['writers'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} absoluteNumber\n   */\n  exports.prototype['absoluteNumber'] = undefined;\n  /**\n   * @member {Number} airedEpisodeNumber\n   */\n  exports.prototype['airedEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} airedSeason\n   */\n  exports.prototype['airedSeason'] = undefined;\n  /**\n   * @member {Number} airsAfterSeason\n   */\n  exports.prototype['airsAfterSeason'] = undefined;\n  /**\n   * @member {Number} airsBeforeEpisode\n   */\n  exports.prototype['airsBeforeEpisode'] = undefined;\n  /**\n   * @member {Number} airsBeforeSeason\n   */\n  exports.prototype['airsBeforeSeason'] = undefined;\n  /**\n   * @member {String} director\n   */\n  exports.prototype['director'] = undefined;\n  /**\n   * @member {Array.<String>} directors\n   */\n  exports.prototype['directors'] = undefined;\n  /**\n   * @member {Number} dvdChapter\n   */\n  exports.prototype['dvdChapter'] = undefined;\n  /**\n   * @member {String} dvdDiscid\n   */\n  exports.prototype['dvdDiscid'] = undefined;\n  /**\n   * @member {Number} dvdEpisodeNumber\n   */\n  exports.prototype['dvdEpisodeNumber'] = undefined;\n  /**\n   * @member {Number} dvdSeason\n   */\n  exports.prototype['dvdSeason'] = undefined;\n  /**\n   * @member {String} episodeName\n   */\n  exports.prototype['episodeName'] = undefined;\n  /**\n   * @member {String} filename\n   */\n  exports.prototype['filename'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Array.<String>} guestStars\n   */\n  exports.prototype['guestStars'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} imdbId\n   */\n  exports.prototype['imdbId'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} lastUpdatedBy\n   */\n  exports.prototype['lastUpdatedBy'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} productionCode\n   */\n  exports.prototype['productionCode'] = undefined;\n  /**\n   * @member {String} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {String} showUrl\n   */\n  exports.prototype['showUrl'] = undefined;\n  /**\n   * @member {Number} siteRating\n   */\n  exports.prototype['siteRating'] = undefined;\n  /**\n   * @member {Number} siteRatingCount\n   */\n  exports.prototype['siteRatingCount'] = undefined;\n  /**\n   * @member {String} thumbAdded\n   */\n  exports.prototype['thumbAdded'] = undefined;\n  /**\n   * @member {Number} thumbAuthor\n   */\n  exports.prototype['thumbAuthor'] = undefined;\n  /**\n   * @member {String} thumbHeight\n   */\n  exports.prototype['thumbHeight'] = undefined;\n  /**\n   * @member {String} thumbWidth\n   */\n  exports.prototype['thumbWidth'] = undefined;\n  /**\n   * @member {Array.<String>} writers\n   */\n  exports.prototype['writers'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse200Errors = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse200Errors model module.\n   * @module model/InlineResponse200Errors\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse200Errors</code>.\n   * @alias module:model/InlineResponse200Errors\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse200Errors</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse200Errors} obj Optional instance to populate.\n   * @return {module:model/InlineResponse200Errors} The populated <code>InlineResponse200Errors</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('invalidFilters')) {\n        obj['invalidFilters'] = ApiClient.convertToType(data['invalidFilters'], ['String']);\n      }\n      if (data.hasOwnProperty('invalidLanguage')) {\n        obj['invalidLanguage'] = ApiClient.convertToType(data['invalidLanguage'], 'String');\n      }\n      if (data.hasOwnProperty('invalidQueryParams')) {\n        obj['invalidQueryParams'] = ApiClient.convertToType(data['invalidQueryParams'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Invalid filters passed to route\n   * @member {Array.<String>} invalidFilters\n   */\n  exports.prototype['invalidFilters'] = undefined;\n  /**\n   * Invalid language or translation missing\n   * @member {String} invalidLanguage\n   */\n  exports.prototype['invalidLanguage'] = undefined;\n  /**\n   * Invalid query params passed to route\n   * @member {Array.<String>} invalidQueryParams\n   */\n  exports.prototype['invalidQueryParams'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse401 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse401 model module.\n   * @module model/InlineResponse401\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse401</code>.\n   * @alias module:model/InlineResponse401\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse401</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse401} obj Optional instance to populate.\n   * @return {module:model/InlineResponse401} The populated <code>InlineResponse401</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Not Authorized'\n   */\n  exports.prototype['Error'] = 'Not Authorized';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse404 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse404 model module.\n   * @module model/InlineResponse404\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse404</code>.\n   * @alias module:model/InlineResponse404\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse404</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse404} obj Optional instance to populate.\n   * @return {module:model/InlineResponse404} The populated <code>InlineResponse404</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Not Found'\n   */\n  exports.prototype['Error'] = 'Not Found';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.InlineResponse409 = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The InlineResponse409 model module.\n   * @module model/InlineResponse409\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>InlineResponse409</code>.\n   * @alias module:model/InlineResponse409\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>InlineResponse409</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/InlineResponse409} obj Optional instance to populate.\n   * @return {module:model/InlineResponse409} The populated <code>InlineResponse409</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Conflict'\n   */\n  exports.prototype['Error'] = 'Conflict';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.JSONErrors = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The JSONErrors model module.\n   * @module model/JSONErrors\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>JSONErrors</code>.\n   * @alias module:model/JSONErrors\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>JSONErrors</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/JSONErrors} obj Optional instance to populate.\n   * @return {module:model/JSONErrors} The populated <code>JSONErrors</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('invalidFilters')) {\n        obj['invalidFilters'] = ApiClient.convertToType(data['invalidFilters'], ['String']);\n      }\n      if (data.hasOwnProperty('invalidLanguage')) {\n        obj['invalidLanguage'] = ApiClient.convertToType(data['invalidLanguage'], 'String');\n      }\n      if (data.hasOwnProperty('invalidQueryParams')) {\n        obj['invalidQueryParams'] = ApiClient.convertToType(data['invalidQueryParams'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Invalid filters passed to route\n   * @member {Array.<String>} invalidFilters\n   */\n  exports.prototype['invalidFilters'] = undefined;\n  /**\n   * Invalid language or translation missing\n   * @member {String} invalidLanguage\n   */\n  exports.prototype['invalidLanguage'] = undefined;\n  /**\n   * Invalid query params passed to route\n   * @member {Array.<String>} invalidQueryParams\n   */\n  exports.prototype['invalidQueryParams'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Language = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Language model module.\n   * @module model/Language\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Language</code>.\n   * @alias module:model/Language\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Language</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Language} obj Optional instance to populate.\n   * @return {module:model/Language} The populated <code>Language</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('abbreviation')) {\n        obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');\n      }\n      if (data.hasOwnProperty('englishName')) {\n        obj['englishName'] = ApiClient.convertToType(data['englishName'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} abbreviation\n   */\n  exports.prototype['abbreviation'] = undefined;\n  /**\n   * @member {String} englishName\n   */\n  exports.prototype['englishName'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2001Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2001Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.LanguageData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2001Data);\n  }\n}(this, function(ApiClient, InlineResponse2001Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The LanguageData model module.\n   * @module model/LanguageData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>LanguageData</code>.\n   * @alias module:model/LanguageData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>LanguageData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/LanguageData} obj Optional instance to populate.\n   * @return {module:model/LanguageData} The populated <code>LanguageData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2001Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2001Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Links = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Links model module.\n   * @module model/Links\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Links</code>.\n   * @alias module:model/Links\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Links</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Links} obj Optional instance to populate.\n   * @return {module:model/Links} The populated <code>Links</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('first')) {\n        obj['first'] = ApiClient.convertToType(data['first'], 'Number');\n      }\n      if (data.hasOwnProperty('last')) {\n        obj['last'] = ApiClient.convertToType(data['last'], 'Number');\n      }\n      if (data.hasOwnProperty('next')) {\n        obj['next'] = ApiClient.convertToType(data['next'], 'Number');\n      }\n      if (data.hasOwnProperty('previous')) {\n        obj['previous'] = ApiClient.convertToType(data['previous'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} first\n   */\n  exports.prototype['first'] = undefined;\n  /**\n   * @member {Number} last\n   */\n  exports.prototype['last'] = undefined;\n  /**\n   * @member {Number} next\n   */\n  exports.prototype['next'] = undefined;\n  /**\n   * @member {Number} previous\n   */\n  exports.prototype['previous'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.NotAuthorized = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The NotAuthorized model module.\n   * @module model/NotAuthorized\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>NotAuthorized</code>.\n   * @alias module:model/NotAuthorized\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>NotAuthorized</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/NotAuthorized} obj Optional instance to populate.\n   * @return {module:model/NotAuthorized} The populated <code>NotAuthorized</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Not Authorized'\n   */\n  exports.prototype['Error'] = 'Not Authorized';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.NotFound = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The NotFound model module.\n   * @module model/NotFound\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>NotFound</code>.\n   * @alias module:model/NotFound\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>NotFound</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/NotFound} obj Optional instance to populate.\n   * @return {module:model/NotFound} The populated <code>NotFound</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('Error')) {\n        obj['Error'] = ApiClient.convertToType(data['Error'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} Error\n   * @default 'Not Found'\n   */\n  exports.prototype['Error'] = 'Not Found';\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Series = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Series model module.\n   * @module model/Series\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Series</code>.\n   * @alias module:model/Series\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Series</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Series} obj Optional instance to populate.\n   * @return {module:model/Series} The populated <code>Series</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('added')) {\n        obj['added'] = ApiClient.convertToType(data['added'], 'String');\n      }\n      if (data.hasOwnProperty('airsDayOfWeek')) {\n        obj['airsDayOfWeek'] = ApiClient.convertToType(data['airsDayOfWeek'], 'String');\n      }\n      if (data.hasOwnProperty('airsTime')) {\n        obj['airsTime'] = ApiClient.convertToType(data['airsTime'], 'String');\n      }\n      if (data.hasOwnProperty('aliases')) {\n        obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);\n      }\n      if (data.hasOwnProperty('banner')) {\n        obj['banner'] = ApiClient.convertToType(data['banner'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('genre')) {\n        obj['genre'] = ApiClient.convertToType(data['genre'], ['String']);\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('imdbId')) {\n        obj['imdbId'] = ApiClient.convertToType(data['imdbId'], 'String');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n      if (data.hasOwnProperty('network')) {\n        obj['network'] = ApiClient.convertToType(data['network'], 'String');\n      }\n      if (data.hasOwnProperty('networkId')) {\n        obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('rating')) {\n        obj['rating'] = ApiClient.convertToType(data['rating'], 'String');\n      }\n      if (data.hasOwnProperty('runtime')) {\n        obj['runtime'] = ApiClient.convertToType(data['runtime'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'Number');\n      }\n      if (data.hasOwnProperty('seriesName')) {\n        obj['seriesName'] = ApiClient.convertToType(data['seriesName'], 'String');\n      }\n      if (data.hasOwnProperty('siteRating')) {\n        obj['siteRating'] = ApiClient.convertToType(data['siteRating'], 'Number');\n      }\n      if (data.hasOwnProperty('siteRatingCount')) {\n        obj['siteRatingCount'] = ApiClient.convertToType(data['siteRatingCount'], 'Number');\n      }\n      if (data.hasOwnProperty('status')) {\n        obj['status'] = ApiClient.convertToType(data['status'], 'String');\n      }\n      if (data.hasOwnProperty('zap2itId')) {\n        obj['zap2itId'] = ApiClient.convertToType(data['zap2itId'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} added\n   */\n  exports.prototype['added'] = undefined;\n  /**\n   * @member {String} airsDayOfWeek\n   */\n  exports.prototype['airsDayOfWeek'] = undefined;\n  /**\n   * @member {String} airsTime\n   */\n  exports.prototype['airsTime'] = undefined;\n  /**\n   * @member {Array.<String>} aliases\n   */\n  exports.prototype['aliases'] = undefined;\n  /**\n   * @member {String} banner\n   */\n  exports.prototype['banner'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Array.<String>} genre\n   */\n  exports.prototype['genre'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} imdbId\n   */\n  exports.prototype['imdbId'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} network\n   */\n  exports.prototype['network'] = undefined;\n  /**\n   * @member {String} networkId\n   */\n  exports.prototype['networkId'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} rating\n   */\n  exports.prototype['rating'] = undefined;\n  /**\n   * @member {String} runtime\n   */\n  exports.prototype['runtime'] = undefined;\n  /**\n   * @member {Number} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {String} seriesName\n   */\n  exports.prototype['seriesName'] = undefined;\n  /**\n   * @member {Number} siteRating\n   */\n  exports.prototype['siteRating'] = undefined;\n  /**\n   * @member {Number} siteRatingCount\n   */\n  exports.prototype['siteRatingCount'] = undefined;\n  /**\n   * @member {String} status\n   */\n  exports.prototype['status'] = undefined;\n  /**\n   * @member {String} zap2itId\n   */\n  exports.prototype['zap2itId'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2006Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2006Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesActors = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2006Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2006Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesActors model module.\n   * @module model/SeriesActors\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesActors</code>.\n   * @alias module:model/SeriesActors\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesActors</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesActors} obj Optional instance to populate.\n   * @return {module:model/SeriesActors} The populated <code>SeriesActors</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2006Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2006Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesActorsData = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesActorsData model module.\n   * @module model/SeriesActorsData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesActorsData</code>.\n   * @alias module:model/SeriesActorsData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesActorsData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesActorsData} obj Optional instance to populate.\n   * @return {module:model/SeriesActorsData} The populated <code>SeriesActorsData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('image')) {\n        obj['image'] = ApiClient.convertToType(data['image'], 'String');\n      }\n      if (data.hasOwnProperty('imageAdded')) {\n        obj['imageAdded'] = ApiClient.convertToType(data['imageAdded'], 'String');\n      }\n      if (data.hasOwnProperty('imageAuthor')) {\n        obj['imageAuthor'] = ApiClient.convertToType(data['imageAuthor'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('role')) {\n        obj['role'] = ApiClient.convertToType(data['role'], 'String');\n      }\n      if (data.hasOwnProperty('seriesId')) {\n        obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'Number');\n      }\n      if (data.hasOwnProperty('sortOrder')) {\n        obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} image\n   */\n  exports.prototype['image'] = undefined;\n  /**\n   * @member {String} imageAdded\n   */\n  exports.prototype['imageAdded'] = undefined;\n  /**\n   * @member {Number} imageAuthor\n   */\n  exports.prototype['imageAuthor'] = undefined;\n  /**\n   * @member {String} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * @member {String} role\n   */\n  exports.prototype['role'] = undefined;\n  /**\n   * @member {Number} seriesId\n   */\n  exports.prototype['seriesId'] = undefined;\n  /**\n   * @member {Number} sortOrder\n   */\n  exports.prototype['sortOrder'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2005Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2005Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2005Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2005Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesData model module.\n   * @module model/SeriesData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesData</code>.\n   * @alias module:model/SeriesData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesData} obj Optional instance to populate.\n   * @return {module:model/SeriesData} The populated <code>SeriesData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse2005Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse2005Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2007Data', 'model/InlineResponse2007Links', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2007Data'), require('./InlineResponse2007Links'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesEpisodes = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2007Data, root.TheTvdbApiV2.InlineResponse2007Links, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2007Data, InlineResponse2007Links, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesEpisodes model module.\n   * @module model/SeriesEpisodes\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesEpisodes</code>.\n   * @alias module:model/SeriesEpisodes\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesEpisodes</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesEpisodes} obj Optional instance to populate.\n   * @return {module:model/SeriesEpisodes} The populated <code>SeriesEpisodes</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2007Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n      if (data.hasOwnProperty('links')) {\n        obj['links'] = InlineResponse2007Links.constructFromObject(data['links']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2007Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n  /**\n   * @member {module:model/InlineResponse2007Links} links\n   */\n  exports.prototype['links'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2007Data', 'model/InlineResponse2007Links', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2007Data'), require('./InlineResponse2007Links'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesEpisodesQuery = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2007Data, root.TheTvdbApiV2.InlineResponse2007Links, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse2007Data, InlineResponse2007Links, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesEpisodesQuery model module.\n   * @module model/SeriesEpisodesQuery\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesEpisodesQuery</code>.\n   * @alias module:model/SeriesEpisodesQuery\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesEpisodesQuery</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesEpisodesQuery} obj Optional instance to populate.\n   * @return {module:model/SeriesEpisodesQuery} The populated <code>SeriesEpisodesQuery</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse2007Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n      if (data.hasOwnProperty('links')) {\n        obj['links'] = InlineResponse2007Links.constructFromObject(data['links']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse2007Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n  /**\n   * @member {module:model/InlineResponse2007Links} links\n   */\n  exports.prototype['links'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesEpisodesQueryParams = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesEpisodesQueryParams model module.\n   * @module model/SeriesEpisodesQueryParams\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesEpisodesQueryParams</code>.\n   * @alias module:model/SeriesEpisodesQueryParams\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesEpisodesQueryParams</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesEpisodesQueryParams} obj Optional instance to populate.\n   * @return {module:model/SeriesEpisodesQueryParams} The populated <code>SeriesEpisodesQueryParams</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesEpisodesSummary = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesEpisodesSummary model module.\n   * @module model/SeriesEpisodesSummary\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesEpisodesSummary</code>.\n   * @alias module:model/SeriesEpisodesSummary\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesEpisodesSummary</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesEpisodesSummary} obj Optional instance to populate.\n   * @return {module:model/SeriesEpisodesSummary} The populated <code>SeriesEpisodesSummary</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('airedEpisodes')) {\n        obj['airedEpisodes'] = ApiClient.convertToType(data['airedEpisodes'], 'String');\n      }\n      if (data.hasOwnProperty('airedSeasons')) {\n        obj['airedSeasons'] = ApiClient.convertToType(data['airedSeasons'], ['String']);\n      }\n      if (data.hasOwnProperty('dvdEpisodes')) {\n        obj['dvdEpisodes'] = ApiClient.convertToType(data['dvdEpisodes'], 'String');\n      }\n      if (data.hasOwnProperty('dvdSeasons')) {\n        obj['dvdSeasons'] = ApiClient.convertToType(data['dvdSeasons'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Number of all aired episodes for this series\n   * @member {String} airedEpisodes\n   */\n  exports.prototype['airedEpisodes'] = undefined;\n  /**\n   * @member {Array.<String>} airedSeasons\n   */\n  exports.prototype['airedSeasons'] = undefined;\n  /**\n   * Number of all dvd episodes for this series\n   * @member {String} dvdEpisodes\n   */\n  exports.prototype['dvdEpisodes'] = undefined;\n  /**\n   * @member {Array.<String>} dvdSeasons\n   */\n  exports.prototype['dvdSeasons'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20010RatingsInfo'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20010RatingsInfo'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImageQueryResult = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20010RatingsInfo);\n  }\n}(this, function(ApiClient, InlineResponse20010RatingsInfo) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImageQueryResult model module.\n   * @module model/SeriesImageQueryResult\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImageQueryResult</code>.\n   * @alias module:model/SeriesImageQueryResult\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImageQueryResult</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImageQueryResult} obj Optional instance to populate.\n   * @return {module:model/SeriesImageQueryResult} The populated <code>SeriesImageQueryResult</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('fileName')) {\n        obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('keyType')) {\n        obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');\n      }\n      if (data.hasOwnProperty('languageId')) {\n        obj['languageId'] = ApiClient.convertToType(data['languageId'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingsInfo')) {\n        obj['ratingsInfo'] = InlineResponse20010RatingsInfo.constructFromObject(data['ratingsInfo']);\n      }\n      if (data.hasOwnProperty('resolution')) {\n        obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');\n      }\n      if (data.hasOwnProperty('subKey')) {\n        obj['subKey'] = ApiClient.convertToType(data['subKey'], 'String');\n      }\n      if (data.hasOwnProperty('thumbnail')) {\n        obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} fileName\n   */\n  exports.prototype['fileName'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} keyType\n   */\n  exports.prototype['keyType'] = undefined;\n  /**\n   * @member {Number} languageId\n   */\n  exports.prototype['languageId'] = undefined;\n  /**\n   * @member {module:model/InlineResponse20010RatingsInfo} ratingsInfo\n   */\n  exports.prototype['ratingsInfo'] = undefined;\n  /**\n   * @member {String} resolution\n   */\n  exports.prototype['resolution'] = undefined;\n  /**\n   * @member {String} subKey\n   */\n  exports.prototype['subKey'] = undefined;\n  /**\n   * @member {String} thumbnail\n   */\n  exports.prototype['thumbnail'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20010Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20010Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImageQueryResults = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20010Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20010Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImageQueryResults model module.\n   * @module model/SeriesImageQueryResults\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImageQueryResults</code>.\n   * @alias module:model/SeriesImageQueryResults\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImageQueryResults</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImageQueryResults} obj Optional instance to populate.\n   * @return {module:model/SeriesImageQueryResults} The populated <code>SeriesImageQueryResults</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20010Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20010Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImagesCount = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImagesCount model module.\n   * @module model/SeriesImagesCount\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImagesCount</code>.\n   * @alias module:model/SeriesImagesCount\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImagesCount</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImagesCount} obj Optional instance to populate.\n   * @return {module:model/SeriesImagesCount} The populated <code>SeriesImagesCount</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('fanart')) {\n        obj['fanart'] = ApiClient.convertToType(data['fanart'], 'Number');\n      }\n      if (data.hasOwnProperty('poster')) {\n        obj['poster'] = ApiClient.convertToType(data['poster'], 'Number');\n      }\n      if (data.hasOwnProperty('season')) {\n        obj['season'] = ApiClient.convertToType(data['season'], 'Number');\n      }\n      if (data.hasOwnProperty('seasonwide')) {\n        obj['seasonwide'] = ApiClient.convertToType(data['seasonwide'], 'Number');\n      }\n      if (data.hasOwnProperty('series')) {\n        obj['series'] = ApiClient.convertToType(data['series'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} fanart\n   */\n  exports.prototype['fanart'] = undefined;\n  /**\n   * @member {Number} poster\n   */\n  exports.prototype['poster'] = undefined;\n  /**\n   * @member {Number} season\n   */\n  exports.prototype['season'] = undefined;\n  /**\n   * @member {Number} seasonwide\n   */\n  exports.prototype['seasonwide'] = undefined;\n  /**\n   * @member {Number} series\n   */\n  exports.prototype['series'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse2009Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse2009Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImagesCounts = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse2009Data);\n  }\n}(this, function(ApiClient, InlineResponse2009Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImagesCounts model module.\n   * @module model/SeriesImagesCounts\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImagesCounts</code>.\n   * @alias module:model/SeriesImagesCounts\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImagesCounts</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImagesCounts} obj Optional instance to populate.\n   * @return {module:model/SeriesImagesCounts} The populated <code>SeriesImagesCounts</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse2009Data.constructFromObject(data['data']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse2009Data} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImagesQueryParam = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImagesQueryParam model module.\n   * @module model/SeriesImagesQueryParam\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImagesQueryParam</code>.\n   * @alias module:model/SeriesImagesQueryParam\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImagesQueryParam</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImagesQueryParam} obj Optional instance to populate.\n   * @return {module:model/SeriesImagesQueryParam} The populated <code>SeriesImagesQueryParam</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('keyType')) {\n        obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');\n      }\n      if (data.hasOwnProperty('languageId')) {\n        obj['languageId'] = ApiClient.convertToType(data['languageId'], 'String');\n      }\n      if (data.hasOwnProperty('resolution')) {\n        obj['resolution'] = ApiClient.convertToType(data['resolution'], ['String']);\n      }\n      if (data.hasOwnProperty('subKey')) {\n        obj['subKey'] = ApiClient.convertToType(data['subKey'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} keyType\n   */\n  exports.prototype['keyType'] = undefined;\n  /**\n   * @member {String} languageId\n   */\n  exports.prototype['languageId'] = undefined;\n  /**\n   * @member {Array.<String>} resolution\n   */\n  exports.prototype['resolution'] = undefined;\n  /**\n   * @member {Array.<String>} subKey\n   */\n  exports.prototype['subKey'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20011Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20011Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesImagesQueryParams = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20011Data);\n  }\n}(this, function(ApiClient, InlineResponse20011Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesImagesQueryParams model module.\n   * @module model/SeriesImagesQueryParams\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesImagesQueryParams</code>.\n   * @alias module:model/SeriesImagesQueryParams\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesImagesQueryParams</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesImagesQueryParams} obj Optional instance to populate.\n   * @return {module:model/SeriesImagesQueryParams} The populated <code>SeriesImagesQueryParams</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20011Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20011Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.SeriesSearchData = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The SeriesSearchData model module.\n   * @module model/SeriesSearchData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>SeriesSearchData</code>.\n   * @alias module:model/SeriesSearchData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SeriesSearchData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SeriesSearchData} obj Optional instance to populate.\n   * @return {module:model/SeriesSearchData} The populated <code>SeriesSearchData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('aliases')) {\n        obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);\n      }\n      if (data.hasOwnProperty('banner')) {\n        obj['banner'] = ApiClient.convertToType(data['banner'], 'String');\n      }\n      if (data.hasOwnProperty('firstAired')) {\n        obj['firstAired'] = ApiClient.convertToType(data['firstAired'], 'String');\n      }\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('network')) {\n        obj['network'] = ApiClient.convertToType(data['network'], 'String');\n      }\n      if (data.hasOwnProperty('overview')) {\n        obj['overview'] = ApiClient.convertToType(data['overview'], 'String');\n      }\n      if (data.hasOwnProperty('seriesName')) {\n        obj['seriesName'] = ApiClient.convertToType(data['seriesName'], 'String');\n      }\n      if (data.hasOwnProperty('status')) {\n        obj['status'] = ApiClient.convertToType(data['status'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} aliases\n   */\n  exports.prototype['aliases'] = undefined;\n  /**\n   * @member {String} banner\n   */\n  exports.prototype['banner'] = undefined;\n  /**\n   * @member {String} firstAired\n   */\n  exports.prototype['firstAired'] = undefined;\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} network\n   */\n  exports.prototype['network'] = undefined;\n  /**\n   * @member {String} overview\n   */\n  exports.prototype['overview'] = undefined;\n  /**\n   * @member {String} seriesName\n   */\n  exports.prototype['seriesName'] = undefined;\n  /**\n   * @member {String} status\n   */\n  exports.prototype['status'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Token = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Token model module.\n   * @module model/Token\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Token</code>.\n   * @alias module:model/Token\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Token} obj Optional instance to populate.\n   * @return {module:model/Token} The populated <code>Token</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('token')) {\n        obj['token'] = ApiClient.convertToType(data['token'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} token\n   */\n  exports.prototype['token'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.Update = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Update model module.\n   * @module model/Update\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>Update</code>.\n   * @alias module:model/Update\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Update</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Update} obj Optional instance to populate.\n   * @return {module:model/Update} The populated <code>Update</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'Number');\n      }\n      if (data.hasOwnProperty('lastUpdated')) {\n        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {Number} lastUpdated\n   */\n  exports.prototype['lastUpdated'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20012Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20012Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UpdateData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20012Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20012Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The UpdateData model module.\n   * @module model/UpdateData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UpdateData</code>.\n   * @alias module:model/UpdateData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>UpdateData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UpdateData} obj Optional instance to populate.\n   * @return {module:model/UpdateData} The populated <code>UpdateData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20012Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20012Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UpdateDataQueryParams = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The UpdateDataQueryParams model module.\n   * @module model/UpdateDataQueryParams\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UpdateDataQueryParams</code>.\n   * @alias module:model/UpdateDataQueryParams\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>UpdateDataQueryParams</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UpdateDataQueryParams} obj Optional instance to populate.\n   * @return {module:model/UpdateDataQueryParams} The populated <code>UpdateDataQueryParams</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.User = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The User model module.\n   * @module model/User\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>User</code>.\n   * @alias module:model/User\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/User} obj Optional instance to populate.\n   * @return {module:model/User} The populated <code>User</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('favoritesDisplaymode')) {\n        obj['favoritesDisplaymode'] = ApiClient.convertToType(data['favoritesDisplaymode'], 'String');\n      }\n      if (data.hasOwnProperty('language')) {\n        obj['language'] = ApiClient.convertToType(data['language'], 'String');\n      }\n      if (data.hasOwnProperty('userName')) {\n        obj['userName'] = ApiClient.convertToType(data['userName'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} favoritesDisplaymode\n   */\n  exports.prototype['favoritesDisplaymode'] = undefined;\n  /**\n   * @member {String} language\n   */\n  exports.prototype['language'] = undefined;\n  /**\n   * @member {String} userName\n   */\n  exports.prototype['userName'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20013Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20013Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20013Data);\n  }\n}(this, function(ApiClient, InlineResponse20013Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserData model module.\n   * @module model/UserData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserData</code>.\n   * @alias module:model/UserData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>UserData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserData} obj Optional instance to populate.\n   * @return {module:model/UserData} The populated <code>UserData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse20013Data.constructFromObject(data['data']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse20013Data} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserFavorites = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserFavorites model module.\n   * @module model/UserFavorites\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserFavorites</code>.\n   * @alias module:model/UserFavorites\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>UserFavorites</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserFavorites} obj Optional instance to populate.\n   * @return {module:model/UserFavorites} The populated <code>UserFavorites</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('favorites')) {\n        obj['favorites'] = ApiClient.convertToType(data['favorites'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} favorites\n   */\n  exports.prototype['favorites'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20014Data', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20014Data'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserFavoritesData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20014Data, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20014Data, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserFavoritesData model module.\n   * @module model/UserFavoritesData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserFavoritesData</code>.\n   * @alias module:model/UserFavoritesData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>UserFavoritesData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserFavoritesData} obj Optional instance to populate.\n   * @return {module:model/UserFavoritesData} The populated <code>UserFavoritesData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = InlineResponse20014Data.constructFromObject(data['data']);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/InlineResponse20014Data} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserRatings = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserRatings model module.\n   * @module model/UserRatings\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserRatings</code>.\n   * @alias module:model/UserRatings\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>UserRatings</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserRatings} obj Optional instance to populate.\n   * @return {module:model/UserRatings} The populated <code>UserRatings</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('rating')) {\n        obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingItemId')) {\n        obj['ratingItemId'] = ApiClient.convertToType(data['ratingItemId'], 'Number');\n      }\n      if (data.hasOwnProperty('ratingType')) {\n        obj['ratingType'] = ApiClient.convertToType(data['ratingType'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Number} rating\n   */\n  exports.prototype['rating'] = undefined;\n  /**\n   * @member {Number} ratingItemId\n   */\n  exports.prototype['ratingItemId'] = undefined;\n  /**\n   * @member {String} ratingType\n   */\n  exports.prototype['ratingType'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20015Data', 'model/InlineResponse2007Links', 'model/InlineResponse200Errors'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20015Data'), require('./InlineResponse2007Links'), require('./InlineResponse200Errors'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserRatingsData = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20015Data, root.TheTvdbApiV2.InlineResponse2007Links, root.TheTvdbApiV2.InlineResponse200Errors);\n  }\n}(this, function(ApiClient, InlineResponse20015Data, InlineResponse2007Links, InlineResponse200Errors) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserRatingsData model module.\n   * @module model/UserRatingsData\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserRatingsData</code>.\n   * @alias module:model/UserRatingsData\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>UserRatingsData</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserRatingsData} obj Optional instance to populate.\n   * @return {module:model/UserRatingsData} The populated <code>UserRatingsData</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20015Data]);\n      }\n      if (data.hasOwnProperty('errors')) {\n        obj['errors'] = InlineResponse200Errors.constructFromObject(data['errors']);\n      }\n      if (data.hasOwnProperty('links')) {\n        obj['links'] = InlineResponse2007Links.constructFromObject(data['links']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20015Data>} data\n   */\n  exports.prototype['data'] = undefined;\n  /**\n   * @member {module:model/InlineResponse200Errors} errors\n   */\n  exports.prototype['errors'] = undefined;\n  /**\n   * @member {module:model/InlineResponse2007Links} links\n   */\n  exports.prototype['links'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/InlineResponse20015Data'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./InlineResponse20015Data'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserRatingsDataNoLinks = factory(root.TheTvdbApiV2.ApiClient, root.TheTvdbApiV2.InlineResponse20015Data);\n  }\n}(this, function(ApiClient, InlineResponse20015Data) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserRatingsDataNoLinks model module.\n   * @module model/UserRatingsDataNoLinks\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserRatingsDataNoLinks</code>.\n   * @alias module:model/UserRatingsDataNoLinks\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>UserRatingsDataNoLinks</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserRatingsDataNoLinks} obj Optional instance to populate.\n   * @return {module:model/UserRatingsDataNoLinks} The populated <code>UserRatingsDataNoLinks</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], [InlineResponse20015Data]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<module:model/InlineResponse20015Data>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n",
    "/**\n * TheTVDB API v2\n * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \\\"JWT Token\\\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\\\"apikey\\\":\\\"APIKEY\\\",\\\"username\\\":\\\"USERNAME\\\",\\\"userkey\\\":\\\"USERKEY\\\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.\n *\n * OpenAPI spec version: 2.1.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.TheTvdbApiV2) {\n      root.TheTvdbApiV2 = {};\n    }\n    root.TheTvdbApiV2.UserRatingsQueryParams = factory(root.TheTvdbApiV2.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The UserRatingsQueryParams model module.\n   * @module model/UserRatingsQueryParams\n   * @version 2.1.2\n   */\n\n  /**\n   * Constructs a new <code>UserRatingsQueryParams</code>.\n   * @alias module:model/UserRatingsQueryParams\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>UserRatingsQueryParams</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/UserRatingsQueryParams} obj Optional instance to populate.\n   * @return {module:model/UserRatingsQueryParams} The populated <code>UserRatingsQueryParams</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('data')) {\n        obj['data'] = ApiClient.convertToType(data['data'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Array.<String>} data\n   */\n  exports.prototype['data'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n"
  ]
}